/******************************************************************************

Copyright 2011-2013 Martijn van der Kwast <martijn@vdkwast.com>

This file is part of FP4-Manager

FP4-Manager is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

FP4-Manager is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
FP4-Manager. If not, see http://www.gnu.org/licenses/.

******************************************************************************/

/* This file was generated by a perl script that I seem to have misplaced. Now
 * I'm editing it manually. The cave is empty.
 */

{
    FP4Effect* fx = new FP4Effect(0x01, 0x00, "Equalizer", 1, 9);
    FP4EnumParam* p1 = new FP4EnumParam("Low Freq", "Hz", "Frequency of the low range", "Effect", 0);
    p1->addValue("200");
    p1->addValue("400");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Mid1 Freq", 0, 16, 200, 8000, "Hz", "Frequency of the first middle range", "Effect", 8);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Mid1 Gain", 0, 30, -15, 15, "dB", "Gain of the first middle range", "Effect", 15);
    fx->addParam(p4);
    FP4EnumParam* p5 = new FP4EnumParam("Mid1 Q", "", "Q of first middle range", "Effect", 0);
    p5->addValue("0.5");
    p5->addValue("1");
    p5->addValue("2");
    p5->addValue("5");
    p5->addValue("8");
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Mid2 Freq", 0, 16, 200, 8000, "Hz", "Frequency of the second middle range", "Effect", 8);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Mid2 Gain", 0, 30, -15, 15, "dB", "Gain of the second middle range", "Effect", 15);
    fx->addParam(p7);
    FP4EnumParam* p8 = new FP4EnumParam("Mid2 Q", "", "Q of second middle range", "Effect", 0);
    p8->addValue("0.5");
    p8->addValue("1");
    p8->addValue("2");
    p8->addValue("5");
    p8->addValue("8");
    fx->addParam(p8);
    FP4EnumParam* p9 = new FP4EnumParam("High Freq", "Hz", "Frequency of the high range", "Effect", 0);
    p9->addValue("2000");
    p9->addValue("4000");
    p9->addValue("8000");
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p11);
    fx->setDescription("Four-band stereo equalizer (low, mid x 2, high).");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x01, "Spectrum", 1, 3);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Band1 (250 Hz)", 0, 30, -15, 15, "Hz", "250Hz gain", "Effect", 15);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Band1 (500 Hz)", 0, 30, -15, 15, "Hz", "500Hz gain", "Effect", 15);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Band1 (1000 Hz)", 0, 30, -15, 15, "Hz", "1000Hz gain", "Effect", 15);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Band1 (1250 Hz)", 0, 30, -15, 15, "Hz", "1250Hz gain", "Effect", 15);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Band1 (2000 Hz)", 0, 30, -15, 15, "Hz", "2000Hz gain", "Effect", 15);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Band1 (3150 Hz)", 0, 30, -15, 15, "Hz", "3150Hz gain", "Effect", 15);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Band1 (4000 Hz)", 0, 30, -15, 15, "Hz", "4000Hz gain", "Effect", 15);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Band1 (8000 Hz)", 0, 30, -15, 15, "Hz", "8000Hz gain", "Effect", 15);
    fx->addParam(p8);
    FP4EnumParam* p9 = new FP4EnumParam("Q", "", "Simultaneously adjust the Q of all frequency bands", "Effect", 0);
    p9->addValue("0.5");
    p9->addValue("1");
    p9->addValue("2");
    p9->addValue("4");
    p9->addValue("8");
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p10);
    fx->setDescription("Stereo spectrum. Spectrum is a type of filter which modifies the timbre by boosting or cutting the level at specific frequencies.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x02, "Enhancer", 0, 1);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Sensivity", 0, 127, 0, 127, "", "Sensivity of the enhancer", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Mix", 0, 127, 0, 127, "", "Level of the overtones generated by the enhancer", "Effect", 63.5);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p5);
    fx->setDescription("Control the overtone structure of the high frequencies, adding sparkle and tightness to the sound.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x04, "Isolator", 1, 2);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Boost/Cut Low", 0, 64, -60, 4, "dB", "Boost or Cut low range. At -60dB the sound becomes inaudible. 0dB is the equivalent of the input level of the sound.", "Effect", 32);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Boost/Cut Medium", 0, 64, -60, 4, "dB", "Boost or Cut medium range. At -60dB the sound becomes inaudible. 0dB is the equivalent of the input level of the sound.", "Effect", 32);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Boost/Cut High", 0, 64, -60, 4, "dB", "Boost or Cut high range. At -60dB the sound becomes inaudible. 0dB is the equivalent of the input level of the sound.", "Effect", 32);
    fx->addParam(p3);
    FP4BooleanParam* p4 = new FP4BooleanParam("Antiphase Low", "Turns on the antiphase function on the low frequency ranges. When turned on, the counter channel of steeo sound is inverted and added to the signal", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Antiphase Low Level", 0, 127, 0, 127, "", "Adjusts the level settings for the low frequency ranges. Adjusting this level for certain frequencies allows you to lend emphasis to specific parts. This is effective only for stereo sources.", "Effect", 95);
    fx->addParam(p5);
    FP4BooleanParam* p6 = new FP4BooleanParam("Antiphase Mid", "Turns on the antiphase function on the mid frequency ranges. When turned on, the counter channel of steeo sound is inverted and added to the signal", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Antiphase Mid Level", 0, 127, 0, 127, "", "Adjusts the level settings for the mid frequency ranges. Adjusting this level for certain frequencies almids you to lend emphasis to specific parts. This is effective only for stereo sources.", "Effect", 95);
    fx->addParam(p7);
    FP4BooleanParam* p8 = new FP4BooleanParam("Low Boost", "Turns Low Booster On/Off. This emphasises the bottom to create a heavy bass sound", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Low Boost Level", 0, 127, 0, 127, "", "Increasing this value gives you a heavier lower end. Depending on the isolator and filter settings, this effect may be hard to distinguish.", "Effect", 63.5);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p10);
    fx->setDescription("Equalizer which cuts the volume greatly, allowing you to add a special effect to the sound by cutting the volume in varying ranges.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x05, "Low Boost", 0, 1);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Boost Frequency", 0, 8, 50, 125, "Hz", "Center frequency at which the lower range will be boosted", "Effect", 4);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Boost Gain", 0, 12, 0, 12, "dB", "Amount by which the lower range will be boosted", "Effect", 6);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Boost width", "", "Width of the lower range that will be boosted", "Effect", 0);
    p3->addValue("Wide");
    p3->addValue("Mid");
    p3->addValue("Narrow");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Low gain", 0, 30, -15, 15, "dB", "Gain of the low frequency range", "Effect", 15);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("High gain", 0, 30, -15, 15, "dB", "Gain of the high frequency range", "Effect", 15);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p6);
    fx->setDescription("Boost the volume of the lower range, creating powerfull lows.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x06, "High Pass Filter", 2, 3);
    FP4EnumParam* p1 = new FP4EnumParam("Filter type", "", "Filter type Frequency. Range that will pass through each filter. Lpf: Frequencies below the cutoff. Bpf: Frequencies in the region of the cutoff. Hpf: Frequencies above the cutoff. Notch: Frequencies other than the region of the cutoff ", "Effect", 0);
    p1->addValue("Lpf");
    p1->addValue("Bpf");
    p1->addValue("Hpf");
    p1->addValue("Notch");
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Filter slope", "dB", "Amount of attenuation per octave", "Effect", 0);
    p2->addValue("-12");
    p2->addValue("-24");
    p2->addValue("-36");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Filter cutoff", 0, 127, 0, 127, "", "Cutoff frequency of the filter. Increasing this value will raise the cutoff frequency.", "Effect", 0);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Filter resonance", 0, 100, 0, 100, "", "Filter resonance level. Increasing this value will emphasize the region near the cutoff frequency", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Filter gain", 0, 12, 0, 12, "dB", "Amount of boost for the filter output", "Effect", 6);
    fx->addParam(p5);
    FP4BooleanParam* p6 = new FP4BooleanParam("Modulation", "On/Off switch for cyclic change", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Modulation Wave", "", "How the cutoff frequency will be modulated. Tri: Triangle wave. Sqr: Square wave. Sin: Sine wave. Saw1: Sawtooth wave (upward). Saw2: Sawtooth wave (downward).", "Effect", 0);
    p7->addValue("Tri");
    p7->addValue("Sqr");
    p7->addValue("Sin");
    p7->addValue("Saw1");
    p7->addValue("Saw2");
    fx->addParam(p7);

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x00, "Equalizer", 1, 9);
		FP4EnumParam* p1 = new FP4EnumParam("Low Freq", "Hz", "Frequency of the low range", "Effect", 0);
		p1->addValue("200");
		p1->addValue("400");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Mid1 Freq", 0, 16, 200, 8000, "Hz", "Frequency of the first middle range", "Effect", 8);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Mid1 Gain", 0, 30, -15, 15, "dB", "Gain of the first middle range", "Effect", 15);
		fx->addParam(p4);
		FP4EnumParam* p5 = new FP4EnumParam("Mid1 Q", "", "Q of first middle range", "Effect", 0);
		p5->addValue("0.5");
		p5->addValue("1");
		p5->addValue("2");
		p5->addValue("5");
		p5->addValue("8");
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Mid2 Freq", 0, 16, 200, 8000, "Hz", "Frequency of the second middle range", "Effect", 8);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Mid2 Gain", 0, 30, -15, 15, "dB", "Gain of the second middle range", "Effect", 15);
		fx->addParam(p7);
		FP4EnumParam* p8 = new FP4EnumParam("Mid2 Q", "", "Q of second middle range", "Effect", 0);
		p8->addValue("0.5");
		p8->addValue("1");
		p8->addValue("2");
		p8->addValue("5");
		p8->addValue("8");
		fx->addParam(p8);
		FP4EnumParam* p9 = new FP4EnumParam("High Freq", "Hz", "Frequency of the high range", "Effect", 0);
		p9->addValue("2000");
		p9->addValue("4000");
		p9->addValue("8000");
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p11);
		fx->setDescription("Four-band stereo equalizer (low, mid x 2, high).");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x01, "Spectrum", 1, 3);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Band1 (250 Hz)", 0, 30, -15, 15, "Hz", "250Hz gain", "Effect", 15);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Band1 (500 Hz)", 0, 30, -15, 15, "Hz", "500Hz gain", "Effect", 15);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Band1 (1000 Hz)", 0, 30, -15, 15, "Hz", "1000Hz gain", "Effect", 15);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Band1 (1250 Hz)", 0, 30, -15, 15, "Hz", "1250Hz gain", "Effect", 15);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Band1 (2000 Hz)", 0, 30, -15, 15, "Hz", "2000Hz gain", "Effect", 15);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Band1 (3150 Hz)", 0, 30, -15, 15, "Hz", "3150Hz gain", "Effect", 15);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Band1 (4000 Hz)", 0, 30, -15, 15, "Hz", "4000Hz gain", "Effect", 15);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Band1 (8000 Hz)", 0, 30, -15, 15, "Hz", "8000Hz gain", "Effect", 15);
		fx->addParam(p8);
		FP4EnumParam* p9 = new FP4EnumParam("Q", "", "Simultaneously adjust the Q of all frequency bands", "Effect", 0);
		p9->addValue("0.5");
		p9->addValue("1");
		p9->addValue("2");
		p9->addValue("4");
		p9->addValue("8");
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p10);
		fx->setDescription("Stereo spectrum. Spectrum is a type of filter which modifies the timbre by boosting or cutting the level at specific frequencies.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x02, "Enhancer", 0, 1);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Sensivity", 0, 127, 0, 127, "", "Sensivity of the enhancer", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Mix", 0, 127, 0, 127, "", "Level of the overtones generated by the enhancer", "Effect", 63.5);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p5);
		fx->setDescription("Control the overtone structure of the high frequencies, adding sparkle and tightness to the sound.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x04, "Isolator", 1, 2);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Boost/Cut Low", 0, 64, -60, 4, "dB", "Boost or Cut low range. At -60dB the sound becomes inaudible. 0dB is the equivalent of the input level of the sound.", "Effect", 32);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Boost/Cut Medium", 0, 64, -60, 4, "dB", "Boost or Cut medium range. At -60dB the sound becomes inaudible. 0dB is the equivalent of the input level of the sound.", "Effect", 32);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Boost/Cut High", 0, 64, -60, 4, "dB", "Boost or Cut high range. At -60dB the sound becomes inaudible. 0dB is the equivalent of the input level of the sound.", "Effect", 32);
		fx->addParam(p3);
		FP4BooleanParam* p4 = new FP4BooleanParam("Antiphase Low", "Turns on the antiphase function on the low frequency ranges. When turned on, the counter channel of steeo sound is inverted and added to the signal", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Antiphase Low Level", 0, 127, 0, 127, "", "Adjusts the level settings for the low frequency ranges. Adjusting this level for certain frequencies allows you to lend emphasis to specific parts. This is effective only for stereo sources.", "Effect", 95);
		fx->addParam(p5);
		FP4BooleanParam* p6 = new FP4BooleanParam("Antiphase Mid", "Turns on the antiphase function on the mid frequency ranges. When turned on, the counter channel of steeo sound is inverted and added to the signal", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Antiphase Mid Level", 0, 127, 0, 127, "", "Adjusts the level settings for the mid frequency ranges. Adjusting this level for certain frequencies almids you to lend emphasis to specific parts. This is effective only for stereo sources.", "Effect", 95);
		fx->addParam(p7);
		FP4BooleanParam* p8 = new FP4BooleanParam("Low Boost", "Turns Low Booster On/Off. This emphasises the bottom to create a heavy bass sound", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Low Boost Level", 0, 127, 0, 127, "", "Increasing this value gives you a heavier lower end. Depending on the isolator and filter settings, this effect may be hard to distinguish.", "Effect", 63.5);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p10);
		fx->setDescription("Equalizer which cuts the volume greatly, allowing you to add a special effect to the sound by cutting the volume in varying ranges.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x05, "Low Boost", 0, 1);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Boost Frequency", 0, 8, 50, 125, "Hz", "Center frequency at which the lower range will be boosted", "Effect", 4);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Boost Gain", 0, 12, 0, 12, "dB", "Amount by which the lower range will be boosted", "Effect", 6);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Boost width", "", "Width of the lower range that will be boosted", "Effect", 0);
		p3->addValue("Wide");
		p3->addValue("Mid");
		p3->addValue("Narrow");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Low gain", 0, 30, -15, 15, "dB", "Gain of the low frequency range", "Effect", 15);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("High gain", 0, 30, -15, 15, "dB", "Gain of the high frequency range", "Effect", 15);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p6);
		fx->setDescription("Boost the volume of the lower range, creating powerfull lows.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x06, "High Pass Filter", 2, 3);
		FP4EnumParam* p1 = new FP4EnumParam("Filter type", "", "Filter type Frequency. Range that will pass through each filter. Lpf: Frequencies below the cutoff. Bpf: Frequencies in the region of the cutoff. Hpf: Frequencies above the cutoff. Notch: Frequencies other than the region of the cutoff ", "Effect", 0);
		p1->addValue("Lpf");
		p1->addValue("Bpf");
		p1->addValue("Hpf");
		p1->addValue("Notch");
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Filter slope", "dB", "Amount of attenuation per octave", "Effect", 0);
		p2->addValue("-12");
		p2->addValue("-24");
		p2->addValue("-36");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Filter cutoff", 0, 127, 0, 127, "", "Cutoff frequency of the filter. Increasing this value will raise the cutoff frequency.", "Effect", 0);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Filter resonance", 0, 100, 0, 100, "", "Filter resonance level. Increasing this value will emphasize the region near the cutoff frequency", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Filter gain", 0, 12, 0, 12, "dB", "Amount of boost for the filter output", "Effect", 6);
		fx->addParam(p5);
		FP4BooleanParam* p6 = new FP4BooleanParam("Modulation", "On/Off switch for cyclic change", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Modulation Wave", "", "How the cutoff frequency will be modulated. Tri: Triangle wave. Sqr: Square wave. Sin: Sine wave. Saw1: Sawtooth wave (upward). Saw2: Sawtooth wave (downward).", "Effect", 0);
		p7->addValue("Tri");
		p7->addValue("Sqr");
		p7->addValue("Sin");
		p7->addValue("Saw1");
		p7->addValue("Saw2");
		fx->addParam(p7);
		FP4EnumParam* p8 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p8->addValue("Hz");
		p8->addValue("Note");
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Attack", 0, 127, 0, 127, "", "Speed at which the cutoff frequency will change. This is effective if modulation wave is SQR, SAW1 or SAW2", "Effect", 0);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p13);
		fx->setDescription("A filter with an extremely sharp slope. The cutoff frequency can be varied cyclically");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x10, "Overdrive", 1, 5);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume.", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Amp Type", "", "Type of guitar amp. Small: small amp. Built-In: single-unit type amp. 2-Stack: large double stack amp. 3-Stack: large triple stack amp", "Effect", 0);
		p2->addValue("Small");
		p2->addValue("Built-in");
		p2->addValue("2-Stack");
		p2->addValue("3-Stack");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p6);
		fx->setDescription("Soft distortion similar to that produced by vacuum tube amplifiers.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x11, "Distortion", 1, 5);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume.", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Amp Type", "", "Type of guitar amp. Small: small amp. Built-In: single-unit type amp. 2-Stack: large double stack amp. 3-Stack: large triple stack amp", "Effect", 0);
		p2->addValue("Small");
		p2->addValue("Built-in");
		p2->addValue("2-Stack");
		p2->addValue("3-Stack");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p6);
		fx->setDescription("A distortion more intense than overdrive.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x12, "Overdrive2", 3, 7);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume.", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Tone", 0, 127, 0, 127, "", "Sound quality of the overdrive effect.", "Effect", 0);
		fx->addParam(p2);
		FP4BooleanParam* p3 = new FP4BooleanParam("Amp Simulator", "Switch Amp simulator On or Off.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Amp Type", "", "Type of guitar amp. Small: small amp. Built-In: single-unit type amp. 2-Stack: large double stack amp. 3-Stack: large triple stack amp", "Effect", 0);
		p4->addValue("Small");
		p4->addValue("Built-in");
		p4->addValue("2-Stack");
		p4->addValue("3-Stack");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p8);
		fx->setDescription("An overdrive that produces heavy distortion.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x12, "Distortion2", 3, 7);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume.", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Tone", 0, 127, 0, 127, "", "Sound quality of the overdrive effect.", "Effect", 0);
		fx->addParam(p2);
		FP4BooleanParam* p3 = new FP4BooleanParam("Amp Simulator", "Switch Amp simulator On or Off.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Amp Type", "", "Type of guitar amp. Small: small amp. Built-In: single-unit type amp. 2-Stack: large double stack amp. 3-Stack: large triple stack amp", "Effect", 0);
		p4->addValue("Small");
		p4->addValue("Built-in");
		p4->addValue("2-Stack");
		p4->addValue("3-Stack");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p8);
		fx->setDescription("A distortion effect that produces heavy distortion.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x07, "Speaker Simulation", 0, 4);
		FP4EnumParam* p1 = new FP4EnumParam("Speaker Type", "", "Speaker type", "Effect", 0);
		p1->addValue("Small1 (Small open-back 10, dynamic mic)");
		p1->addValue("Small2 (Small open-back 10, dynamic mic)");
		p1->addValue("Middle (Open-back 12x1, dynamic mic)");
		p1->addValue("JC-120 (Open-back 12x2, dynamic mic)");
		p1->addValue("Built-In 1 (open-back 12x2, dynamic mic)");
		p1->addValue("Built-In 2 (open-back 12x2, condenser mic)");
		p1->addValue("Built-In 3 (open-back 12x2, condenser mic)");
		p1->addValue("Built-In 4 (open-back 12x2, condenser mic)");
		p1->addValue("Built-In 5 (open-back 12x2, condenser mic)");
		p1->addValue("BD Stack 1 (sealed 12x2, condenser mic)");
		p1->addValue("BD Stack 1 (large sealed 12x2, condenser mic)");
		p1->addValue("MSStack 1 (large sealed 12x4, condenser mic)");
		p1->addValue("MSStack 2 (large sealed 12x4, condenser mic)");
		p1->addValue("Metal Stack (large double stack 12x4, condenser mic)");
		p1->addValue("2-Stack (large double stack 12x4, condenser mic)");
		p1->addValue("3-Stack (large triple stack 12x4, condenser mic)");
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Mic distance", "", "Adjust the location of the microphone that is recording the sound of the amplifier, with the mic becoming more distant in the order of 1, 2, 3", "Effect", 0);
		p2->addValue("1");
		p2->addValue("2");
		p2->addValue("3");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Mic Level", 0, 127, 0, 127, "", "Volume of the microphone", "Effect", 95);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Direct Level", 0, 127, 0, 127, "", "Volume of the direct sound", "Effect", 95);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p5);
		fx->setDescription("Simulate speaker type and microphone settings used to record the speaker sound.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x14, "Guitar Amp Simulator", 1, 11);
		FP4BooleanParam* p1 = new FP4BooleanParam("Preamp Switch", "Turns the Amp On or Off", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Preamp Type", "", "Type of guitar amp", "Effect", 0);
		p2->addValue("JC-120");
		p2->addValue("Clean Twin");
		p2->addValue("MATCH");
		p2->addValue("Drive");
		p2->addValue("BG Lead");
		p2->addValue("MSI1959I");
		p2->addValue("MSI1959II");
		p2->addValue("MSI1959I+II");
		p2->addValue("SLDN-Lead");
		p2->addValue("Metal-5150");
		p2->addValue("Metal Lead");
		p2->addValue("OD-1");
		p2->addValue("OD-2 Turbo");
		p2->addValue("Distortion");
		p2->addValue("Fuzz");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Preamp Volume", 0, 127, 0, 127, "", "Volume and amount of distortion", "Effect", 0);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Preamp Master", 0, 127, 0, 127, "", "Volume of the entire preamp", "Effect", 0);
		fx->addParam(p4);
		FP4EnumParam* p5 = new FP4EnumParam("Preamp Gain", "", "Amount of preamp distortion", "Effect", 0);
		p5->addValue("Low");
		p5->addValue("Middle");
		p5->addValue("High");
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Preamp Bass", 0, 127, 0, 127, "", "Tone of bass frequency range", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Preamp Middle", 0, 127, 0, 127, "", "Tone of middle frequency range. Doesn't work with MATCH preamp type", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Preamp Treble", 0, 127, 0, 127, "", "Tone of treble frequency range", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Preamp Presence", 0, 127, 0, 127, "", "Tone of ultra-high frequency range", "Effect", 0);
		fx->addParam(p9);
		FP4BooleanParam* p10 = new FP4BooleanParam("Preamp Bright", "Turning this on produces a sharper and brighter sound. This parameter applies to the JC-120, Clean Twin and BG Lead preamp types", "Effect", 0);
		fx->addParam(p10);
		FP4BooleanParam* p11 = new FP4BooleanParam("Speaker Switch", "Determines whether the signal passes through the speaker or not", "Effect", 0);
		fx->addParam(p11);
		FP4EnumParam* p12 = new FP4EnumParam("Speaker Type", "", "Speaker type", "Effect", 0);
		p12->addValue("Small1 (Small open-back 10, dynamic mic)");
		p12->addValue("Small2 (Small open-back 10, dynamic mic)");
		p12->addValue("Middle (Open-back 12x1, dynamic mic)");
		p12->addValue("JC-120 (Open-back 12x2, dynamic mic)");
		p12->addValue("Built-In 1 (open-back 12x2, dynamic mic)");
		p12->addValue("Built-In 2 (open-back 12x2, condenser mic)");
		p12->addValue("Built-In 3 (open-back 12x2, condenser mic)");
		p12->addValue("Built-In 4 (open-back 12x2, condenser mic)");
		p12->addValue("Built-In 5 (open-back 12x2, condenser mic)");
		p12->addValue("BD Stack 1 (sealed 12x2, condenser mic)");
		p12->addValue("BD Stack 1 (large sealed 12x2, condenser mic)");
		p12->addValue("MSStack 1 (large sealed 12x4, condenser mic)");
		p12->addValue("MSStack 2 (large sealed 12x4, condenser mic)");
		p12->addValue("Metal Stack (large double stack 12x4, condenser mic)");
		p12->addValue("2-Stack (large double stack 12x4, condenser mic)");
		p12->addValue("3-Stack (large triple stack 12x4, condenser mic)");
		fx->addParam(p12);
		FP4EnumParam* p13 = new FP4EnumParam("Mic distance", "", "Adjust the location of the microphone that is recording the sound of the amplifier, with the mic becoming more distant in the order of 1, 2, 3", "Effect", 0);
		p13->addValue("1");
		p13->addValue("2");
		p13->addValue("3");
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Mic Level", 0, 127, 0, 127, "", "Volume of the microphone", "Effect", 95);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Direct Level", 0, 127, 0, 127, "", "Volume of the direct sound", "Effect", 95);
		fx->addParam(p15);
		FP4ContinuousParam* p16 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
		fx->addParam(p16);
		FP4ContinuousParam* p17 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p17);
		fx->setDescription("Simulate the sound of a guitar amplifier.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x20, "Phaser", 3, 1);
		FP4EnumParam* p1 = new FP4EnumParam("Mode", "", "Number of stages in phaser", "Effect", 0);
		p1->addValue("4-Stage");
		p1->addValue("8-Stage");
		p1->addValue("12-Stage");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Manual", 0, 127, 0, 127, "", "Adjust the basic frequency from which the sound will be modulated", "Effect", 0);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p3->addValue("Hz");
		p3->addValue("Note");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Polarity", "", "Selects whether the left and right phase of the modulation will be the same or the opposite. Inverse: The left and right phase will be opposite. When using a mono source, this spreads the sound. Synchro: The left and right phase will be the same. Select this when inputting a stereo source.", "Effect", 0);
		p7->addValue("Inverse");
		p7->addValue("Synchro");
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Resonance", 0, 127, 0, 127, "", "Amount of feedback", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Cross Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the phaser sound that is fed back into the effect. Negative (-) settings will invert the phase.", "Effect", 0);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Mix", 0, 127, 0, 127, "", "Level of the phase-shifted sound", "Effect", 63.5);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p13);
		fx->setDescription("Stereo Phaser. A phase-shifted sound is added to the original sound and modulated.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x29, "Multi Stage Phaser", 3, 1);
		FP4EnumParam* p1 = new FP4EnumParam("Mode", "", "Number of stages in phaser", "Effect", 0);
		p1->addValue("4-Stage");
		p1->addValue("8-Stage");
		p1->addValue("12-Stage");
		p1->addValue("16-Stage");
		p1->addValue("20-Stage");
		p1->addValue("24-Stage");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Manual", 0, 127, 0, 127, "", "Adjust the basic frequency from which the sound will be modulated", "Effect", 0);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p3->addValue("Hz");
		p3->addValue("Note");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Resonance", 0, 127, 0, 127, "", "Amount of feedback", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Mix", 0, 127, 0, 127, "", "Level of the phase-shifted sound", "Effect", 63.5);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p12);
		fx->setDescription("Extremely high settings of the phase difference produce a deep phase effect.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x2a, "Infinite Phaser", 1, 2);
		FP4EnumParam* p1 = new FP4EnumParam("Mode", "", "Higher values will produce a deeper phaser effect", "Effect", 0);
		p1->addValue("1");
		p1->addValue("2");
		p1->addValue("3");
		p1->addValue("4");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Speed", 0, 127, -100, 100, "", "Speed at which to raise or lower the frequency is modulated. (+: upward, -:downward)", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Resonance", 0, 127, 0, 127, "", "Amount of feedback", "Effect", 0);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Mix", 0, 127, 0, 127, "", "Level of the phase-shifted sound", "Effect", 63.5);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p8);
		fx->setDescription("A phaser that continously raises or lowers the frequency at which the sound is modulated.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x23, "Stereo Flanger", 4, 6);
		FP4EnumParam* p1 = new FP4EnumParam("Filter Type", "", "Type of filter. Off: No filter is used. Lpf: Cuts the frequency above the cutoff freq. Hpf: Cuts the frequency below the cutoff freq.", "Effect", 0);
		p1->addValue("Off");
		p1->addValue("Lpf");
		p1->addValue("Hpf");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Cutoff Frequency", 0, 16, 200, 8000, "Hz", "Basic frequency of the filter", "Effect", 8);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the flanger is heard", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("Hz");
		p4->addValue("Note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative (-) settings will invert the phase", "Effect", 0);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the flanger sound (0: 100% direct. 100: 100% flanger)", "Effect", 50);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p13);
		fx->setDescription("A stereo flanger. (The LFO has the same phase for left and right.) It produces a metallic resonance that rises and falls like a jet airplane taking off or landing. A filter is provided so that you can adjust the timbre of the flanged sound.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x27, "3D Flanger", 4, 6);
		FP4EnumParam* p1 = new FP4EnumParam("Filter Type", "", "Type of filter. Off: No filter is used. Lpf: Cuts the frequency above the cutoff freq. Hpf: Cuts the frequency below the cutoff freq.", "Effect", 0);
		p1->addValue("Off");
		p1->addValue("Lpf");
		p1->addValue("Hpf");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Cutoff Frequency", 0, 16, 200, 8000, "Hz", "Basic frequency of the filter", "Effect", 8);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the flanger is heard", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("Hz");
		p4->addValue("Note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative (-) settings will invert the phase", "Effect", 0);
		fx->addParam(p9);
		FP4EnumParam* p10 = new FP4EnumParam("Output mode", "", "Adjusts the method that will be used to hear the sound that is output to the OUTPUT jacks. The optimal 3D effect will be achieved if you select Speakers when using speakers and Phones when using headphones.", "Effect", 0);
		p10->addValue("Speaker");
		p10->addValue("Phones");
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the flanger sound (0: 100% direct. 100: 100% flanger)", "Effect", 50);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p14);
		fx->setDescription("This applies a 3D effect to the flanger sound. The flanger sound will be positioned 90 degrees left and 90 degrees right.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x28, "2 Band Flanger", 3, 10);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Split Freq", 0, 16, 200, 8000, "Hz", "Frequency at which the low and high band will be divided", "Effect", 8);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Low Pre-Delay", 0, 125, 0, 100, "ms", "Delay time from when the original sound is heard to when the low-range flanger sound is heard", "Effect", 0);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Low Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p3->addValue("Hz");
		p3->addValue("Note");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Low Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz) of the low-range flanger", "Effect", 1);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note) of the low-range fkanger", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Low Depth", 0, 127, 0, 127, "", "Depth of modulation of the low-range flanger", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Low Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound of the low-range flanger", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Low Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the low-range flanger sound that is fed back into the effect. Negative (-) settings will invert the phase", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("High Pre-Delay", 0, 125, 0, 100, "ms", "Delay time from when the original sound is heard to when the high-range flanger sound is heard", "Effect", 0);
		fx->addParam(p9);
		FP4EnumParam* p10 = new FP4EnumParam("High Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p10->addValue("Hz");
		p10->addValue("Note");
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("High Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz) of the high-range flanger", "Effect", 1);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("High Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note) of the high-range fkanger", "Effect", 0);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("High Depth", 0, 127, 0, 127, "", "Depth of modulation of the high-range flanger", "Effect", 0);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("High Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound of the high-range flanger", "Effect", 0);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("High Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the high-range flanger sound that is fed back into the effect. Negative (-) settings will invert the phase", "Effect", 0);
		fx->addParam(p15);
		FP4ContinuousParam* p16 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the flanger sound (0: 100% direct. 100: 100% flanger)", "Effect", 50);
		fx->addParam(p16);
		FP4ContinuousParam* p17 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p17);
		fx->setDescription("A flanger that lets you apply an effect independently to the low-frequency and high-frequency ranges.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x21, "Auto Wah", 6, 1);
		FP4EnumParam* p1 = new FP4EnumParam("Filter Type", "", "Type of filter. Lpf: The wah effect will be applied over a wide frequency range. Bpf: The wah effect will be applied over a narrow frequency range.", "Effect", 0);
		p1->addValue("Lpf");
		p1->addValue("Bpf");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Center Frequency", 0, 127, 0, 127, "", "Adjust the center frequency at which the effect is applied", "Effect", 63.5);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Peak", 0, 127, 0, 127, "", "Adjusts the amount of the wah effect that will occur in the range of the center frequency. Set a higher value for Q to narrow the range to be affected.", "Effect", 0);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Sensitivity", 0, 127, 0, 127, "", "Adjusts the sensitivity with which the filter is controlled", "Effect", 63.5);
		fx->addParam(p4);
		FP4EnumParam* p5 = new FP4EnumParam("Polarity", "", "Sets the direction in which the frequency will change when the auto-wah filter is modulated. Up: The filter will change toward a higher frequency. Down: The filter will change toward a lower frequency.", "Effect", 0);
		p5->addValue("Up");
		p5->addValue("Down");
		fx->addParam(p5);
		FP4EnumParam* p6 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p6->addValue("Hz");
		p6->addValue("Note");
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Adjusts the degree of phase shift of the left and right sounds when the wah effect is applied", "Effect", 0);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p13);
		fx->setDescription("Cyclically controls a filter to create cyclic change in timbre.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x03, "Humanizer", 6, 1);
		FP4BooleanParam* p1 = new FP4BooleanParam("Drive Enable", "Turns drive on/off", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume.", "Effect", 0);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Vowel 1", "", "Selects the vowel", "Effect", 0);
		p3->addValue("a");
		p3->addValue("e");
		p3->addValue("i");
		p3->addValue("o");
		p3->addValue("u");
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Vowel 2", "", "Selects the vowel", "Effect", 0);
		p4->addValue("a");
		p4->addValue("e");
		p4->addValue("i");
		p4->addValue("o");
		p4->addValue("u");
		fx->addParam(p4);
		FP4EnumParam* p5 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p5->addValue("Hz");
		p5->addValue("Note");
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Effect Depth", "Effect", 0);
		fx->addParam(p8);
		FP4BooleanParam* p9 = new FP4BooleanParam("Input Sync Enable", "Determines whether the LFO for switching the vowels is reset by the input signal (ON) or not (OFF). ", "Effect", 0);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Input Sync Threshold", 0, 127, 0, 127, "", "Volume at which reset is applied", "Effect", 0);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Manual", 0, 127, 0, 127, "", "Point at which Vowel 1/2 switch 49 or less: Vowel 1 will have a longer duration. 50: Vowel 1 and 2 will be of equal duration. 51 or more: Vowel 2 will have a longer duration.", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p15);
		fx->setDescription("Adds a vowel character to the sound, making it similar to a human voice.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x2b, "Ring Modulator", 0, 5);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Frequency", 0, 127, 0, 127, "", "Adjusts the frequency at which the modulation is applied", "Effect", 63.5);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Sensitivity", 0, 127, 0, 127, "", "Adjusts the amount of frequency modulation applied", "Effect", 63.5);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Polarity", "", "Determines whether the frequency modulation moves towards higher frequencies (Up) or lower frequencies (Down).", "Effect", 0);
		p3->addValue("Up");
		p3->addValue("Down");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p7);
		fx->setDescription("This is an effect that applies amplitude modulation (AM) to the input signal, producing bell-like sounds. You can also change the modulation frequency in response to changes in the volume of the sound sent into the effect.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x25, "Tremolo", 2, 4);
		FP4EnumParam* p1 = new FP4EnumParam("Mod Wave", "", "Modulation wave", "Effect", 0);
		p1->addValue("Triangle");
		p1->addValue("Square");
		p1->addValue("Sinus");
		p1->addValue("Saw1");
		p1->addValue("Saw2");
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p2->addValue("Hz");
		p2->addValue("Note");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth to which the effect is applied", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p8);
		fx->setDescription("Cyclically modulates the volume to add tremolo effect to the sound.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x26, "Auto Pan", 2, 4);
		FP4EnumParam* p1 = new FP4EnumParam("Mod Wave", "", "Modulation wave", "Effect", 0);
		p1->addValue("Triangle");
		p1->addValue("Square");
		p1->addValue("Sinus");
		p1->addValue("Saw1");
		p1->addValue("Saw2");
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p2->addValue("Hz");
		p2->addValue("Note");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth to which the effect is applied", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p8);
		fx->setDescription("Cyclically modulates the stereo location of the sound.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x2c, "Slicer", 2, 7);
		FP4EnumParam* p1 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p1->addValue("Hz");
		p1->addValue("Note");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Attack", 0, 127, 0, 127, "", "Speed at which the level changes between steps", "Effect", 0);
		fx->addParam(p4);
		FP4BooleanParam* p5 = new FP4BooleanParam("Input Sync Enable", "Determines whether an input note will cause the sequence to resume from the first step of the sequence (ON) or not (OFF).", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Input Sync Threshold", 0, 127, 0, 127, "", "Volume at which an input note is detected", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Mode", "", "Sets the manner in which the volume changes as one step progresses to the next. Legato: The change in volume from one step’s level to the next remains unaltered. If the level of a following step is the same as the one preceding it, there is no change in volume. Slash: The level is momentarily set to 0 before progressing to the level of the next step. This change in volume occurs even if the level of the following step is the same as the preceding step.", "Effect", 0);
		p7->addValue("Legato");
		p7->addValue("Slash");
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Shuffle", 0, 127, 0, 127, "", "Timing of volume changes for even-numbered steps (step 2, step 4, step 6...). The higher the value, the later the beat progresses.", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p9);
		fx->setDescription("By applying successive cuts to the sound, this effect turns a conventional sound into a sound that appears to be played as a backing phrase. This is especially effective when applied to sustain-type sounds.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x30, "Compressor", 1, 0);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Attack", 0, 127, 0, 127, "", "Speed at which the compression starts", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Threshold", 0, 127, 0, 127, "", "Adjust the volume at which the compression begins", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Post Gain", 0, 18, 0, 18, "dB", "Adjust the output gain", "Effect", 9);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p6);
		fx->setDescription("Flattens out high levels and boosts low levels, smoothing out fluctuations in volume.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x31, "Limiter", 1, 2);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Release", 0, 127, 0, 127, "", "Adjusts the time after which the signal volume falls below the threshold level until compression is no longer applied", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Threshold", 0, 127, 0, 127, "", "Adjust the volume at which the compression begins", "Effect", 0);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Ratio", "", "Compression ratio", "Effect", 0);
		p3->addValue("1.5:1");
		p3->addValue("2:1");
		p3->addValue("4:1");
		p3->addValue("100:1");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Post Gain", 0, 18, 0, 18, "dB", "Adjust the output gain", "Effect", 9);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p7);
		fx->setDescription("Compresses signals that exceed a specified volume level, preventing distortion from occurring.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x42, "Stereo Chorus", 4, 6);
		FP4EnumParam* p1 = new FP4EnumParam("Filter Type", "", "Type of filter. Off: No filter is used. Lpf: Cuts the frequency above the cutoff freq. Hpf: Cuts the frequency below the cutoff freq.", "Effect", 0);
		p1->addValue("Off");
		p1->addValue("Lpf");
		p1->addValue("Hpf");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Cutoff Frequency", 0, 16, 200, 8000, "Hz", "Basic frequency of the filter", "Effect", 8);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the flanger is heard", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("Hz");
		p4->addValue("Note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p12);
		fx->setDescription("This is a stereo chorus. A filter is provided so that you can adjust the timbre of the chorus sound.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x40, "Hexa Chorus", 2, 4);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the chorus sound is heard", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p2->addValue("Hz");
		p2->addValue("Note");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Pre Delay Deviation", 0, 20, 0, 20, "", "Adjusts the differences in Pre Delay between each chorus sound", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Depth Deviation", 0, 20, 0, 20, "", "Adjusts the differences in modulation depth between each chorus sound.", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Pan deviation", 0, 20, 0, 20, "", "Adjusts the difference in stereo location between each chorus sound. 0: All chorus sounds will be in the center. 20: Each chorus sound will be spaced at 60 degree intervals relative to the center.", "Effect", 10);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p10);
		fx->setDescription("Uses a six-phase chorus (six layers of chorused sound) to give richness and spatial spread to the sound.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x41, "Tremolo Chorus", 4, 6);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Pre Delay Deviation", 0, 20, 0, 20, "", "Adjusts the differences in Pre Delay between each chorus sound", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Chorus Rate Mode", "", "When this is set to note the chorus is synchronized with the tempo.", "Effect", 0);
		p2->addValue("Hz");
		p2->addValue("Note");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p5);
		FP4EnumParam* p6 = new FP4EnumParam("Tremolo Rate Mode", "", "When this is set to note the tremolo is synchronized with the tempo.", "Effect", 0);
		p6->addValue("Hz");
		p6->addValue("Note");
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Tremolo Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Tremolo Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Tremolo Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Tremolo Separation", 0, 127, 0, 127, "", "Spread of tremolo effect", "Effect", 0);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Tremolo Phase", 0, 90, 0, 180, "deg", "Spatial spread of the tremolo effect", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p13);
		fx->setDescription("This is a chorus effect with added Tremolo (cyclic modulation of volume).");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x43, "Space D", 2, 4);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the chorus sound is heard", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p2->addValue("Hz");
		p2->addValue("Note");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p10);
		fx->setDescription("This is a multiple chorus that applies two-phase modulation in stereo. It gives no impression of modulation, but produces a transparent chorus effect.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x44, "3D Chorus", 4, 6);
		FP4EnumParam* p1 = new FP4EnumParam("Filter Type", "", "Type of filter. Off: No filter is used. Lpf: Cuts the frequency above the cutoff freq. Hpf: Cuts the frequency below the cutoff freq.", "Effect", 0);
		p1->addValue("Off");
		p1->addValue("Lpf");
		p1->addValue("Hpf");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Cutoff Frequency", 0, 16, 200, 8000, "Hz", "Basic frequency of the filter", "Effect", 8);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the chorus sound is heard", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("Hz");
		p4->addValue("Note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
		fx->addParam(p8);
		FP4EnumParam* p9 = new FP4EnumParam("Output mode", "", "Adjusts the method that will be used to hear the sound that is output to the OUTPUT jacks. The optimal 3D effect will be achieved if you select Speakers when using speakers and Phones when using headphones.", "Effect", 0);
		p9->addValue("Speaker");
		p9->addValue("Phones");
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p13);
		fx->setDescription("This applies a 3D effect to the chorus sound. The chorus sound will be positioned 90 degrees left and 90 degrees right.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x45, "2Band Chorus", 5, 11);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Split Freq", 0, 16, 200, 8000, "Hz", "Frequency at which the low and high band will be divided", "Effect", 8);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Low Pre-Delay", 0, 125, 0, 100, "ms", "Delay time from when the original sound is heard to when the low-range chorus sound is heard", "Effect", 0);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Low Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p3->addValue("Hz");
		p3->addValue("Note");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Low Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz) of the low-range chorus", "Effect", 1);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note) of the low-range fkanger", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Low Depth", 0, 127, 0, 127, "", "Depth of modulation of the low-range chorus", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Low Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound of the low-range chorus", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("High Pre-Delay", 0, 125, 0, 100, "ms", "Delay time from when the original sound is heard to when the high-range chorus sound is heard", "Effect", 0);
		fx->addParam(p8);
		FP4EnumParam* p9 = new FP4EnumParam("High Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p9->addValue("Hz");
		p9->addValue("Note");
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("High Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz) of the high-range chorus", "Effect", 1);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("High Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note) of the high-range fkanger", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("High Depth", 0, 127, 0, 127, "", "Depth of modulation of the high-range chorus", "Effect", 0);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("High Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound of the high-range chorus", "Effect", 0);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the chorus sound (0: 100% direct. 100: 100% chorus)", "Effect", 50);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p15);
		fx->setDescription("A chorus effect that lets you apply an effect independently to the low-frequency and high-frequency ranges.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x22, "Rotary", 0, 9);
		FP4EnumParam* p1 = new FP4EnumParam("Rotary Speed", "", "Simultaneously switch the rotational speed of the low frequency rotor and high frequency rotor. Slow: Slows down the rotation to the Slow Rate. Fast: Speeds up the rotation to the Fast Rate.", "Effect", 0);
		p1->addValue("Slow");
		p1->addValue("Fast");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Woofer Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the low frequency rotor.", "Effect", 1);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Woofer Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the low frequency rotor.", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Woofer Acceleration", 0, 15, 0, 15, "", "Adjusts the time it takes the low frequency rotor to reach the newly selected speed when switching from fast to slow (or slow to fast) speed.  Lower values will require longer times.", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Woofer level", 0, 127, 0, 127, "", "Volume of the low frequency rotor.", "Effect", 95);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Tweeter Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the high frequency rotor.", "Effect", 1);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Tweeter Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the high frequency rotor.", "Effect", 1);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Tweeter Acceleration", 0, 15, 0, 15, "", "Adjusts the time it takes the high frequency rotor to reach the newly selected speed when switching from fast to shigh (or shigh to fast) speed.  higher values will require longer times.", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Tweeter level", 0, 127, 0, 127, "", "Volume of the high frequency rotor.", "Effect", 95);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Separation", 0, 127, 0, 127, "", "Spatial dispertion of the sound", "Effect", 0);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p11);
		fx->setDescription("The Rotary effect simulates the sound of the rotary speakers often used with the electric organs of the past. Since the movement of the high range and low range rotors can be set independently, the unique type of modulation characteristic of these speakers can be simulated quite closely. This effect is most suitable for electric organ Patches. ");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x2d, "Rotary2", 0, 1);
		FP4EnumParam* p1 = new FP4EnumParam("Rotary Speed", "", "Rotational speed of the rotating speaker", "Effect", 0);
		p1->addValue("Slow");
		p1->addValue("Fast");
		fx->addParam(p1);
		FP4BooleanParam* p2 = new FP4BooleanParam("Brake", "Switches the rotation of the rotary speaker. When this is turned on, the rotation will gradually stop. When it is turned off, the rotation will gradually resume.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Woofer Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the low frequency rotor.", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Woofer Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the low frequency rotor.", "Effect", 1);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Woofer Trans Up", 0, 127, 0, 127, "", "Adjusts the rate at which the woofer rotation speeds up when the rotation is switched from slow to fast", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Woofer Trans Down", 0, 127, 0, 127, "", "Adjusts the rate at which the woofer rotation slows down when the rotation is switched from fast to slow", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Woofer level", 0, 127, 0, 127, "", "Volume of the low frequency rotor.", "Effect", 95);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Tweeter Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the high frequency rotor.", "Effect", 1);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Tweeter Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the high frequency rotor.", "Effect", 1);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Tweeter Trans Up", 0, 127, 0, 127, "", "Adjusts the rate at which the tweeter rotation speeds up when the rotation is switched from slow to fast", "Effect", 0);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Tweeter Trans Down", 0, 127, 0, 127, "", "Adjusts the rate at which the tweeter rotation slows down when the rotation is switched from fast to shigh", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Tweeter level", 0, 127, 0, 127, "", "Volume of the high frequency rotor.", "Effect", 95);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Spread", 0, 10, 0, 10, "", "Sets the rotary speaker stereo image. The higher the value is set, the wider the sound is spread out.'", "Effect", 0);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p15);
		FP4ContinuousParam* p16 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p16);
		fx->setDescription("This type provides modified response for the rotary speaker, with the low end boosted further. This effect is a descendant of the Roland VK Series' built-in rotary speaker.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x03, 0x00, "Rotary Multi", 8, 5);
		FP4BooleanParam* p1 = new FP4BooleanParam("Vibrato/Chorus On", "Switches the vibrato and chorus effect", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Vibrato/Chorus Type", "", "Vibrato and chorus effect types V-1, V-2, V-3: Adds a wavering (vibrato) that is created by changes in the pitch.The effect deepens as the value is increased C-1, C-2, C-3: Adds a fullness and breadth (chorus) to the sound.The effect deepens as the value is increased.", "Effect", 0);
		p2->addValue("V-1");
		p2->addValue("V-2");
		p2->addValue("V-3");
		p2->addValue("C-1");
		p2->addValue("C-2");
		p2->addValue("C-3");
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Vibrato/Chorus Vintage", "", "This reproduces the subtle differences in the vibrato and chorus effects in organs built in different years.", "Effect", 0);
		p3->addValue("'50");
		p3->addValue("'60");
		p3->addValue("'70");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Vibrato/Chorus Level", 0, 127, 0, 127, "", "Vibrato/chorus effect volume", "Effect", 95);
		fx->addParam(p4);
		FP4BooleanParam* p5 = new FP4BooleanParam("Overdrive On", "Switches the overdrive effect on and off", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Overdrive Drive", 0, 127, 0, 127, "", "Amount of distortion", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Overdrive Level", 0, 127, 0, 127, "", "Overdrive effect volume.", "Effect", 95);
		fx->addParam(p7);
		FP4BooleanParam* p8 = new FP4BooleanParam("Rotary On", "Switches the rotary effect on and off", "Effect", 0);
		fx->addParam(p8);
		FP4EnumParam* p9 = new FP4EnumParam("Rotary Speed", "", "Low and high frequency rotation speeds.", "Effect", 0);
		p9->addValue("Slow");
		p9->addValue("Fast");
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Woofer Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the low frequency rotor.", "Effect", 1);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Woofer Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the low frequency rotor.", "Effect", 1);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Woofer Acceleration", 0, 15, 0, 15, "", "Adjusts the time it takes the low frequency rotor to reach the newly selected speed when switching from fast to slow (or slow to fast) speed.  Lower values will require longer times.", "Effect", 0);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Woofer level", 0, 127, 0, 127, "", "Volume of the low frequency rotor.", "Effect", 95);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Tweeter Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the high frequency rotor.", "Effect", 1);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Tweeter Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the high frequency rotor.", "Effect", 1);
		fx->addParam(p15);
		FP4ContinuousParam* p16 = new FP4ContinuousParam("Tweeter Acceleration", 0, 15, 0, 15, "", "Adjusts the time it takes the high frequency rotor to reach the newly selected speed when switching from fast to shigh (or shigh to fast) speed.  higher values will require longer times.", "Effect", 0);
		fx->addParam(p16);
		FP4ContinuousParam* p17 = new FP4ContinuousParam("Tweeter level", 0, 127, 0, 127, "", "Volume of the high frequency rotor.", "Effect", 95);
		fx->addParam(p17);
		FP4ContinuousParam* p18 = new FP4ContinuousParam("Separation", 0, 127, 0, 127, "", "Spatial dispertion of the sound", "Effect", 0);
		fx->addParam(p18);
		FP4ContinuousParam* p19 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p19);
		fx->setDescription("This is an effect combining the VK series internal effect with an organ effect with the same features. It comprises vibrato/chorus, overdrive, and rotary effects.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x5b, "Stereo Delay 1", 9, 13);
		FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p1->addValue("ms");
		p1->addValue("note");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("ms");
		p4->addValue("note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Phase Left", "", "Phase of the delay sound.", "Effect", 0);
		p7->addValue("Normal");
		p7->addValue("Inverse");
		fx->addParam(p7);
		FP4EnumParam* p8 = new FP4EnumParam("Phase Right", "", "Phase of the delay sound.", "Effect", 0);
		p8->addValue("Normal");
		p8->addValue("Inverse");
		fx->addParam(p8);
		FP4EnumParam* p9 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
		p9->addValue("Normal");
		p9->addValue("Cross");
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p15);
		fx->setDescription("This is a stereo delay.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x5c, "Stereo Delay 2", 9, 13);
		FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p1->addValue("ms");
		p1->addValue("note");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("ms");
		p4->addValue("note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Phase Left", "", "Phase of the delay sound.", "Effect", 0);
		p7->addValue("Normal");
		p7->addValue("Inverse");
		fx->addParam(p7);
		FP4EnumParam* p8 = new FP4EnumParam("Phase Right", "", "Phase of the delay sound.", "Effect", 0);
		p8->addValue("Normal");
		p8->addValue("Inverse");
		fx->addParam(p8);
		FP4EnumParam* p9 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
		p9->addValue("Normal");
		p9->addValue("Cross");
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p15);
		fx->setDescription("This is a stereo delay.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x5d, "Stereo Delay 3", 9, 13);
		FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p1->addValue("ms");
		p1->addValue("note");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("ms");
		p4->addValue("note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Phase Left", "", "Phase of the delay sound.", "Effect", 0);
		p7->addValue("Normal");
		p7->addValue("Inverse");
		fx->addParam(p7);
		FP4EnumParam* p8 = new FP4EnumParam("Phase Right", "", "Phase of the delay sound.", "Effect", 0);
		p8->addValue("Normal");
		p8->addValue("Inverse");
		fx->addParam(p8);
		FP4EnumParam* p9 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
		p9->addValue("Normal");
		p9->addValue("Cross");
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p15);
		fx->setDescription("This is a stereo delay.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x5e, "Stereo Delay 4", 9, 13);
		FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p1->addValue("ms");
		p1->addValue("note");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("ms");
		p4->addValue("note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Phase Left", "", "Phase of the delay sound.", "Effect", 0);
		p7->addValue("Normal");
		p7->addValue("Inverse");
		fx->addParam(p7);
		FP4EnumParam* p8 = new FP4EnumParam("Phase Right", "", "Phase of the delay sound.", "Effect", 0);
		p8->addValue("Normal");
		p8->addValue("Inverse");
		fx->addParam(p8);
		FP4EnumParam* p9 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
		p9->addValue("Normal");
		p9->addValue("Cross");
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p15);
		fx->setDescription("This is a stereo delay.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x5f, "Stereo Delay 5", 9, 13);
		FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p1->addValue("ms");
		p1->addValue("note");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("ms");
		p4->addValue("note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Phase Left", "", "Phase of the delay sound.", "Effect", 0);
		p7->addValue("Normal");
		p7->addValue("Inverse");
		fx->addParam(p7);
		FP4EnumParam* p8 = new FP4EnumParam("Phase Right", "", "Phase of the delay sound.", "Effect", 0);
		p8->addValue("Normal");
		p8->addValue("Inverse");
		fx->addParam(p8);
		FP4EnumParam* p9 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
		p9->addValue("Normal");
		p9->addValue("Cross");
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p15);
		fx->setDescription("This is a stereo delay.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x50, "Monaural Delay", 2, 9);
		FP4EnumParam* p1 = new FP4EnumParam("Delay Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p1->addValue("ms");
		p1->addValue("note");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Time (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Time (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Phase", "", "Phase of the delay sound.", "Effect", 0);
		p4->addValue("Normal");
		p4->addValue("Inverse");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Panning of the delay sound.", "Effect", 63.5);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p11);
		fx->setDescription("A delay that provides a long delay time.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x51, "Modulation Delay", 12, 16);
		FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p1->addValue("ms");
		p1->addValue("note");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("ms");
		p4->addValue("note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
		p7->addValue("Normal");
		p7->addValue("Cross");
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p9);
		FP4EnumParam* p10 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p10->addValue("Hz");
		p10->addValue("Note");
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p15);
		FP4ContinuousParam* p16 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p16);
		FP4ContinuousParam* p17 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p17);
		FP4ContinuousParam* p18 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p18);
		fx->setDescription("Adds modulation to the delayed sound.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x52, "Triple Tap Delay", 9, 16);
		FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p1->addValue("ms");
		p1->addValue("note");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("ms");
		p4->addValue("note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Delay Center Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p7->addValue("ms");
		p7->addValue("note");
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Center (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Delay Center (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Center Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay that is fed back into the effect.", "Effect", 49);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Left Level", 0, 127, 0, 127, "", "Volume of left delay.", "Effect", 95);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Right Level", 0, 127, 0, 127, "", "Volume of right delay.", "Effect", 95);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Center Level", 0, 127, 0, 127, "", "Volume of center delay.", "Effect", 95);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p15);
		FP4ContinuousParam* p16 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p16);
		FP4ContinuousParam* p17 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p17);
		FP4ContinuousParam* p18 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p18);
		fx->setDescription("Produce three delay sounds: left, center and right.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x57, "3D Delay", 9, 17);
		FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p1->addValue("ms");
		p1->addValue("note");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p4->addValue("ms");
		p4->addValue("note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Delay Center Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p7->addValue("ms");
		p7->addValue("note");
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Center (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Delay Center (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Center Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay that is fed back into the effect.", "Effect", 49);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Left Level", 0, 127, 0, 127, "", "Volume of left delay.", "Effect", 95);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Right Level", 0, 127, 0, 127, "", "Volume of right delay.", "Effect", 95);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Center Level", 0, 127, 0, 127, "", "Volume of center delay.", "Effect", 95);
		fx->addParam(p14);
		FP4EnumParam* p15 = new FP4EnumParam("Output mode", "", "Adjusts the method that will be used to hear the sound that is output to the OUTPUT jacks. The optimal 3D effect will be achieved if you select Speakers when using speakers and Phones when using headphones.", "Effect", 0);
		p15->addValue("Speaker");
		p15->addValue("Phones");
		fx->addParam(p15);
		FP4ContinuousParam* p16 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p16);
		FP4ContinuousParam* p17 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p17);
		FP4ContinuousParam* p18 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p18);
		FP4ContinuousParam* p19 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p19);
		fx->setDescription("This applies a 3D effect to the delayed sound. The delayed sound will be positioned 90 degrees left and 90 degrees right");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x59, "Tape Echo", 1, 11);
		FP4EnumParam* p1 = new FP4EnumParam("Mode", "", "Combination of playback heads to use. Select from three different heads with different delay times. S: short M: middle L: long.", "Effect", 0);
		p1->addValue("S");
		p1->addValue("M");
		p1->addValue("L");
		p1->addValue("S+M");
		p1->addValue("S+L");
		p1->addValue("M+L");
		p1->addValue("S+M+L");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Repeat Rate", 0, 127, 0, 127, "", "Tape speed. Increasing this value will shorten the spacing of the delayed sounds.", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Intensity", 0, 127, 0, 127, "", "Amount of delay repeats", "Effect", 0);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Bass", 0, 30, -15, 15, "dB", "Boost/Cut for the lower range of the sound.", "Effect", 15);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Treble", 0, 30, -15, 15, "dB", "Boost/Cut for the upper range of the sound.", "Effect", 15);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Head S Pan", 0, 127, -64, 63, "Panning for the short playback head", "", "Effect", 63.5);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Head M Pan", 0, 127, -64, 63, "Panning for the middle playback head", "", "Effect", 63.5);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Head L Pan", 0, 127, -64, 63, "Panning for the long playback head", "", "Effect", 63.5);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Tape Distortion", 0, 5, 0, 5, "", "Amount of tape-dependent distortion to be added This simulates the slight tonal changes that can be detected by signal-analysis equipment. Increasing this value will increase the distortion.", "Effect", 0);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Wow/Flutter", 0, 127, 0, 127, "", "Speed of wow/flutter (complex variation in pitch caused by tape wear and rotational irregularity)", "Effect", 0);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Wow/Flutter Depth", 0, 127, 0, 127, "", "Depth of wow/flutter.", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Echo Level", 0, 127, 0, 127, "", "Volume of echo sound", "Effect", 95);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Direct Level", 0, 127, 0, 127, "", "Volume of the original sound.", "Effect", 95);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p14);
		fx->setDescription("A virtual tape echo that produces a realistic tape echo sound. This emulates the tape echo section of a Roland RE-201 Space Echo.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x5a, "Reverse Delay", 2, 10);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Threshold", 0, 127, 0, 127, "", "Volume at which the reverse delay will begin to apply", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Delay Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p2->addValue("ms");
		p2->addValue("note");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Time (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Delay Time (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Panning of the delay sound.", "Effect", 63.5);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Level", 0, 127, 0, 127, "", "Volume of the delay sound.", "Effect", 95);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p12);
		fx->setDescription("This is a reverse delay that adds a reversed and delayed sound to the input sound. A tap delay is connected immediately after the reverse delay.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x72, "Lo-Fi", 1, 6);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Pre filter type", 0, 5, 1, 6, "", "Selects the type of filter to be applied to the sound before it passes through the Lo-Fi effect.", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Intensity", 0, 8, 1, 9, "", "Degrades the sound quality. The sound quality gets poorer as this value is increased.", "Effect", 0);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Post filter type", "", "Type of filter. Off: No filter is used. Lpf: Cuts the frequency range above the cutoff. Hpf: Cuts the frequency range below the cutoff.", "Effect", 0);
		p3->addValue("Off");
		p3->addValue("Lpf");
		p3->addValue("Hpf");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Post filter cutoff", 0, 16, 200, 8000, "Hz", "Basic frequency of the cutoff filter.", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p8);
		fx->setDescription("This is an effect that intentionally degrades the sound quality for creative purposes.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x75, "Telephone", 0, 2);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Voice Quality", 0, 15, 0, 15, "", "Audio quality of the telphone voice.", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Treble", 0, 30, -15, 15, "dB", "Bandwidth of the telephone voice.", "Effect", 15);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p4);
		fx->setDescription("Simulates sound going through a telphone.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x01, 0x56, "Gate Reverb", 0, 5);
		FP4EnumParam* p1 = new FP4EnumParam("Type", "", "Type of reverb. Normal: conventional gated reverb. Reverse: backwards reverb. Sweep1: the reverberant sound moves from right to left. Sweep2: the reverberant sound moves from left to right.", "Effect", 0);
		p1->addValue("Normal");
		p1->addValue("Reverse");
		p1->addValue("Sweep1");
		p1->addValue("Sweep2");
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the delayed sound is heard", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Gate Time", 0, 99, 5, 500, "ms", "Adjusts the time from when the delay is heard until it disappears.", "Effect", 0);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p7);
		fx->setDescription("This is a special type of delay in which the reverberant sound is cut off before its natural length.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x00, "Overdrive -> Chorus", 4, 7);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Overdrive Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Overdrive Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the chorus sound is heard", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Chorus Rate Mode", "", "When set to note the chorus is synchronized with the tempo.", "Effect", 0);
		p4->addValue("Hz");
		p4->addValue("Note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Chorus Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the chorus and the sound that is not.", "Effect", 50);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p9);
		fx->setDescription("This effect connects an overdrive and a chorus in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x01, "Overdrive -> Flanger", 4, 8);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Overdrive Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Overdrive Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Flanger Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the flanger sound is heard", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Flanger Rate Mode", "", "When set to note the flanger is synchronized with the tempo.", "Effect", 0);
		p4->addValue("Hz");
		p4->addValue("Note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Flanger Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Flanger Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Flanger Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Flanger Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative settings will inverse the phase.", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Flanger Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the flanger and the sound that is not.", "Effect", 50);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p10);
		fx->setDescription("This effect connects an overdrive and a flanger in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x02, "Overdrive -> Delay", 0, 7);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Overdrive Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Overdrive Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Delay Mode", "", "When set to note the delay is synchronized with the tempo.", "Effect", 0);
		p3->addValue("Hz");
		p3->addValue("Note");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Delay Time", 0, 127, 0, 2540, "ms", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Time", 0, 21, 0, 21, "note", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Feedback", 49, 89, 0, 80, "%", "Adjusts the proportion of the delayed sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Delay HF Damp", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect will be cut. If you do not want to cut the high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the delay and the sound that is not.", "Effect", 50);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p9);
		fx->setDescription("This effect connects an overdrive and a delay in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x03, "Distortion -> Chorus", 4, 7);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Distortion Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Distortion Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the chorus sound is heard", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Chorus Rate Mode", "", "When set to note the chorus is synchronized with the tempo.", "Effect", 0);
		p4->addValue("Hz");
		p4->addValue("Note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Chorus Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the chorus and the sound that is not.", "Effect", 50);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p9);
		fx->setDescription("This effect connects an distortion and a chorus in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x04, "Distortion -> Flanger", 4, 8);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Distortion Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Distortion Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Flanger Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the flanger sound is heard", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Flanger Rate Mode", "", "When set to note the flanger is synchronized with the tempo.", "Effect", 0);
		p4->addValue("Hz");
		p4->addValue("Note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Flanger Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Flanger Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Flanger Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Flanger Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative settings will inverse the phase.", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Flanger Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the flanger and the sound that is not.", "Effect", 50);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p10);
		fx->setDescription("This effect connects an distortion and a flanger in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x05, "Distortion -> Delay", 0, 7);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Distortion Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Distortion Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Delay Mode", "", "When set to note the delay is synchronized with the tempo.", "Effect", 0);
		p3->addValue("Hz");
		p3->addValue("Note");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Delay Time", 0, 127, 0, 2540, "ms", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Time", 0, 21, 0, 21, "note", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Feedback", 49, 89, 0, 80, "%", "Adjusts the proportion of the delayed sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Delay HF Damp", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect will be cut. If you do not want to cut the high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the delay and the sound that is not.", "Effect", 50);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p9);
		fx->setDescription("This effect connects an distortion and a delay in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x06, "Enhancer -> Chorus", 4, 7);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Enhancer Sensitivity", 0, 127, 0, 127, "", "Sensitivity of the enhancer", "Effect", 63.5);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Enhancer Mix", 0, 127, 0, 127, "", "Level of the overtones generated by the enhancer", "Effect", 63.5);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the chorus sound is heard", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Chorus Rate Mode", "", "When set to note the chorus is synchronized with the tempo.", "Effect", 0);
		p4->addValue("Hz");
		p4->addValue("Note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Chorus Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the chorus and the sound that is not.", "Effect", 50);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p9);
		fx->setDescription("This effect connects an enhancer and a chorus in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x07, "Enhancer -> Flanger", 4, 8);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Enhancer Sensitivity", 0, 127, 0, 127, "", "Sensitivity of the enhancer", "Effect", 63.5);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Enhancer Mix", 0, 127, 0, 127, "", "Level of the overtones generated by the enhancer", "Effect", 63.5);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Flanger Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the flanger sound is heard", "Effect", 0);
		fx->addParam(p3);
		FP4EnumParam* p4 = new FP4EnumParam("Flanger Rate Mode", "", "When set to note the flanger is synchronized with the tempo.", "Effect", 0);
		p4->addValue("Hz");
		p4->addValue("Note");
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Flanger Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Flanger Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Flanger Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Flanger Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative settings will inverse the phase.", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Flanger Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the flanger and the sound that is not.", "Effect", 50);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p10);
		fx->setDescription("This effect connects an enhancer and a flanger in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x08, "Enhancer -> Delay", 0, 7);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Enhancer Sensitivity", 0, 127, 0, 127, "", "Sensitivity of the enhancer", "Effect", 63.5);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Enhancer Mix", 0, 127, 0, 127, "", "Level of the overtones generated by the enhancer", "Effect", 63.5);
		fx->addParam(p2);
		FP4EnumParam* p3 = new FP4EnumParam("Delay Mode", "", "When set to note the delay is synchronized with the tempo.", "Effect", 0);
		p3->addValue("Hz");
		p3->addValue("Note");
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Delay Time", 0, 127, 0, 2540, "ms", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Time", 0, 21, 0, 21, "note", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Feedback", 49, 89, 0, 80, "%", "Adjusts the proportion of the delayed sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Delay HF Damp", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect will be cut. If you do not want to cut the high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the delay and the sound that is not.", "Effect", 50);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p9);
		fx->setDescription("This effect connect an enhancer and a delay in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x09, "Chorus -> Delay", 5, 11);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Chorus Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the chorus sound is heard", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Chorus Rate Mode", "", "When set to note the chorus is synchronized with the tempo.", "Effect", 0);
		p2->addValue("Hz");
		p2->addValue("Note");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Chorus Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the chorus and the sound that is not.", "Effect", 50);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Delay Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p7->addValue("ms");
		p7->addValue("note");
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Time", 0, 127, 0, 2540, "ms", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Delay Time", 0, 21, 0, 21, "note", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Delay Feedback", 49, 89, 0, 80, "%", "Adjusts the proportion of the delayed sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Delay HF Damp", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect will be cut. If you do not want to cut the high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Delay Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the delay and the sound that is not.", "Effect", 50);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p13);
		fx->setDescription("This effect connect a chorus and a delay in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x0a, "Flanger -> Delay", 6, 12);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Flanger Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the flanger sound is heard", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Flanger Rate Mode", "", "When set to note the flanger is synchronized with the tempo.", "Effect", 0);
		p2->addValue("Hz");
		p2->addValue("Note");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Flanger Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Flanger Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Flanger Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Flanger Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative settings will inverse the phase.", "Effect", 0);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Flanger Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the flanger and the sound that is not.", "Effect", 50);
		fx->addParam(p7);
		FP4EnumParam* p8 = new FP4EnumParam("Delay Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
		p8->addValue("ms");
		p8->addValue("note");
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Delay Time", 0, 127, 0, 2540, "ms", "Adjusts the time until the delay effect is heard.", "Effect", 0);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Delay Time", 0, 21, 0, 21, "note", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Delay Feedback", 49, 89, 0, 80, "%", "Adjusts the proportion of the delayed sound that is fed back into the effect.", "Effect", 49);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Delay HF Damp", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect will be cut. If you do not want to cut the high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Delay Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the delay and the sound that is not.", "Effect", 50);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p14);
		fx->setDescription("This effect connects a flanger and a delay in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x02, 0x0b, "Chorus -> Flanger", 5, 12);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Chorus Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the chorus sound is heard", "Effect", 0);
		fx->addParam(p1);
		FP4EnumParam* p2 = new FP4EnumParam("Chorus Rate Mode", "", "When set to note the chorus is synchronized with the tempo.", "Effect", 0);
		p2->addValue("Hz");
		p2->addValue("Note");
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Chorus Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the chorus and the sound that is not.", "Effect", 50);
		fx->addParam(p6);
		FP4ContinuousParam* p7 = new FP4ContinuousParam("Flanger Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the flanger sound is heard", "Effect", 0);
		fx->addParam(p7);
		FP4EnumParam* p8 = new FP4EnumParam("Flanger Rate Mode", "", "When set to note the flanger is synchronized with the tempo.", "Effect", 0);
		p8->addValue("Hz");
		p8->addValue("Note");
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("Flanger Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Flanger Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("Flanger Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("Flanger Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative settings will inverse the phase.", "Effect", 0);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("Flanger Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the flanger and the sound that is not.", "Effect", 50);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p14);
		fx->setDescription("This effect connects a chorus and a flanger in series.");
		effects.push_back(fx);
	}

	{
		FP4Effect* fx = new FP4Effect(0x00, 0x40, "Damper resonance", 0, 15);
		FP4ContinuousParam* p1 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of the effect", "Effect", 0);
		fx->addParam(p1);
		FP4ContinuousParam* p2 = new FP4ContinuousParam("Damper", 0, 127, 0, 127, "", "Depth to which the damper pedal is pressed (controls the resonant sound)", "Effect", 0);
		fx->addParam(p2);
		FP4ContinuousParam* p3 = new FP4ContinuousParam("Pre LPF", 1, 32, 16, 15000, "Hz", "Frequency of the filter that cuts the high-frequency content of the input sound. Set to maximum to disable.", "Effect", 1);
		fx->addParam(p3);
		FP4ContinuousParam* p4 = new FP4ContinuousParam("Pre HPF", 0, 31, 16, 15000, "Hz", "Frequency of the filter that cuts the low-frequency content of the input sound. Set to minimum to disable.", "Effect", 0);
		fx->addParam(p4);
		FP4ContinuousParam* p5 = new FP4ContinuousParam("Peaking Frequency", 0, 16, 200, 8000, "Hz", "Frequency of the filter that boosts/cuts a specific frequency in the input sound", "Effect", 8);
		fx->addParam(p5);
		FP4ContinuousParam* p6 = new FP4ContinuousParam("Peaking Gain", 0, 30, -15, 15, "dB", "Amount of cut/boost", "Effect", 15);
		fx->addParam(p6);
		FP4EnumParam* p7 = new FP4EnumParam("Peaking Q", "", "Width of the frequency region boosted/cut by the peaking gain. Larger values make the region narrower.", "Effect", 0);
		p7->addValue("0.5");
		p7->addValue("1.0");
		p7->addValue("2.0");
		p7->addValue("4.0");
		p7->addValue("8.0");
		fx->addParam(p7);
		FP4ContinuousParam* p8 = new FP4ContinuousParam("HF Damp Freq", 1, 32, 16, 15000, "Hz", "Frequency at which the high-frequency content of the resonant sound will be cut. Set to maximum to disable.", "Effect", 16.5);
		fx->addParam(p8);
		FP4ContinuousParam* p9 = new FP4ContinuousParam("LF Damp Freq", 0, 31, 16, 15000, "Hz", "Frequency at which the low-frequency content of the resonant sound will be cut. Set to minimum to disable.", "Effect", 15.5);
		fx->addParam(p9);
		FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
		fx->addParam(p10);
		FP4ContinuousParam* p11 = new FP4ContinuousParam("P-Sft Amount", 0, 127, 0, 127, "", "Amount of resonance", "Effect", 0);
		fx->addParam(p11);
		FP4ContinuousParam* p12 = new FP4ContinuousParam("P-Sft Level", 0, 127, 0, 127, "", "Volume level of the resonant component", "Effect", 95);
		fx->addParam(p12);
		FP4ContinuousParam* p13 = new FP4ContinuousParam("P-Sft LPF", 1, 32, 16, 15000, "Hz", "Basic frequency at which the filter cuts the high-frequency portion of the resonant component. Set to maximum to disable.", "Effect", 1);
		fx->addParam(p13);
		FP4ContinuousParam* p14 = new FP4ContinuousParam("P-Sft HPF", 0, 31, 16, 15000, "Hz", "Basic frequency at which the filter cuts the low-frequency portion of the resonant component. Set to minimum to disable.", "Effect", 0);
		fx->addParam(p14);
		FP4ContinuousParam* p15 = new FP4ContinuousParam("P-Sft to Reverb", 0, 127, 0, 127, "", "Volume of additional resonance added to resonant component.", "Effect", 0);
		fx->addParam(p15);
		FP4ContinuousParam* p16 = new FP4ContinuousParam("Damper offset", 0, 64, 0, 64, "", "Volume of additional slight resonance when the damper pedal is not pressed", "Effect", 0);
		fx->addParam(p16);
		fx->setDescription("On an acoustic piano, holding down the damper pedal allows other strings to resonate in sympathy with the notes you play, creating rich and spacious resonances. This effect simulates these damper resonances.");
		effects.push_back(fx);
	}

    FP4EnumParam* p8 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p8->addValue("Hz");
    p8->addValue("Note");
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Attack", 0, 127, 0, 127, "", "Speed at which the cutoff frequency will change. This is effective if modulation wave is SQR, SAW1 or SAW2", "Effect", 0);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p13);
    fx->setDescription("A filter with an extremely sharp slope. The cutoff frequency can be varied cyclically");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x10, "Overdrive", 1, 5);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume.", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Amp Type", "", "Type of guitar amp. Small: small amp. Built-In: single-unit type amp. 2-Stack: large double stack amp. 3-Stack: large triple stack amp", "Effect", 0);
    p2->addValue("Small");
    p2->addValue("Built-in");
    p2->addValue("2-Stack");
    p2->addValue("3-Stack");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p6);
    fx->setDescription("Soft distortion similar to that produced by vacuum tube amplifiers.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x11, "Distortion", 1, 5);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume.", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Amp Type", "", "Type of guitar amp. Small: small amp. Built-In: single-unit type amp. 2-Stack: large double stack amp. 3-Stack: large triple stack amp", "Effect", 0);
    p2->addValue("Small");
    p2->addValue("Built-in");
    p2->addValue("2-Stack");
    p2->addValue("3-Stack");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p6);
    fx->setDescription("A distortion more intense than overdrive.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x12, "Overdrive2", 3, 7);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume.", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Tone", 0, 127, 0, 127, "", "Sound quality of the overdrive effect.", "Effect", 0);
    fx->addParam(p2);
    FP4BooleanParam* p3 = new FP4BooleanParam("Amp Simulator", "Switch Amp simulator On or Off.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Amp Type", "", "Type of guitar amp. Small: small amp. Built-In: single-unit type amp. 2-Stack: large double stack amp. 3-Stack: large triple stack amp", "Effect", 0);
    p4->addValue("Small");
    p4->addValue("Built-in");
    p4->addValue("2-Stack");
    p4->addValue("3-Stack");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p8);
    fx->setDescription("An overdrive that produces heavy distortion.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x12, "Distortion2", 3, 7);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume.", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Tone", 0, 127, 0, 127, "", "Sound quality of the overdrive effect.", "Effect", 0);
    fx->addParam(p2);
    FP4BooleanParam* p3 = new FP4BooleanParam("Amp Simulator", "Switch Amp simulator On or Off.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Amp Type", "", "Type of guitar amp. Small: small amp. Built-In: single-unit type amp. 2-Stack: large double stack amp. 3-Stack: large triple stack amp", "Effect", 0);
    p4->addValue("Small");
    p4->addValue("Built-in");
    p4->addValue("2-Stack");
    p4->addValue("3-Stack");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p8);
    fx->setDescription("A distortion effect that produces heavy distortion.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x07, "Speaker Simulation", 0, 4);
    FP4EnumParam* p1 = new FP4EnumParam("Speaker Type", "", "Speaker type", "Effect", 0);
    p1->addValue("Small1 (Small open-back 10, dynamic mic)");
    p1->addValue("Small2 (Small open-back 10, dynamic mic)");
    p1->addValue("Middle (Open-back 12x1, dynamic mic)");
    p1->addValue("JC-120 (Open-back 12x2, dynamic mic)");
    p1->addValue("Built-In 1 (open-back 12x2, dynamic mic)");
    p1->addValue("Built-In 2 (open-back 12x2, condenser mic)");
    p1->addValue("Built-In 3 (open-back 12x2, condenser mic)");
    p1->addValue("Built-In 4 (open-back 12x2, condenser mic)");
    p1->addValue("Built-In 5 (open-back 12x2, condenser mic)");
    p1->addValue("BD Stack 1 (sealed 12x2, condenser mic)");
    p1->addValue("BD Stack 1 (large sealed 12x2, condenser mic)");
    p1->addValue("MSStack 1 (large sealed 12x4, condenser mic)");
    p1->addValue("MSStack 2 (large sealed 12x4, condenser mic)");
    p1->addValue("Metal Stack (large double stack 12x4, condenser mic)");
    p1->addValue("2-Stack (large double stack 12x4, condenser mic)");
    p1->addValue("3-Stack (large triple stack 12x4, condenser mic)");
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Mic distance", "", "Adjust the location of the microphone that is recording the sound of the amplifier, with the mic becoming more distant in the order of 1, 2, 3", "Effect", 0);
    p2->addValue("1");
    p2->addValue("2");
    p2->addValue("3");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Mic Level", 0, 127, 0, 127, "", "Volume of the microphone", "Effect", 95);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Direct Level", 0, 127, 0, 127, "", "Volume of the direct sound", "Effect", 95);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p5);
    fx->setDescription("Simulate speaker type and microphone settings used to record the speaker sound.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x14, "Guitar Amp Simulator", 1, 11);
    FP4BooleanParam* p1 = new FP4BooleanParam("Preamp Switch", "Turns the Amp On or Off", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Preamp Type", "", "Type of guitar amp", "Effect", 0);
    p2->addValue("JC-120");
    p2->addValue("Clean Twin");
    p2->addValue("MATCH");
    p2->addValue("Drive");
    p2->addValue("BG Lead");
    p2->addValue("MSI1959I");
    p2->addValue("MSI1959II");
    p2->addValue("MSI1959I+II");
    p2->addValue("SLDN-Lead");
    p2->addValue("Metal-5150");
    p2->addValue("Metal Lead");
    p2->addValue("OD-1");
    p2->addValue("OD-2 Turbo");
    p2->addValue("Distortion");
    p2->addValue("Fuzz");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Preamp Volume", 0, 127, 0, 127, "", "Volume and amount of distortion", "Effect", 0);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Preamp Master", 0, 127, 0, 127, "", "Volume of the entire preamp", "Effect", 0);
    fx->addParam(p4);
    FP4EnumParam* p5 = new FP4EnumParam("Preamp Gain", "", "Amount of preamp distortion", "Effect", 0);
    p5->addValue("Low");
    p5->addValue("Middle");
    p5->addValue("High");
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Preamp Bass", 0, 127, 0, 127, "", "Tone of bass frequency range", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Preamp Middle", 0, 127, 0, 127, "", "Tone of middle frequency range. Doesn't work with MATCH preamp type", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Preamp Treble", 0, 127, 0, 127, "", "Tone of treble frequency range", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Preamp Presence", 0, 127, 0, 127, "", "Tone of ultra-high frequency range", "Effect", 0);
    fx->addParam(p9);
    FP4BooleanParam* p10 = new FP4BooleanParam("Preamp Bright", "Turning this on produces a sharper and brighter sound. This parameter applies to the JC-120, Clean Twin and BG Lead preamp types", "Effect", 0);
    fx->addParam(p10);
    FP4BooleanParam* p11 = new FP4BooleanParam("Speaker Switch", "Determines whether the signal passes through the speaker or not", "Effect", 0);
    fx->addParam(p11);
    FP4EnumParam* p12 = new FP4EnumParam("Speaker Type", "", "Speaker type", "Effect", 0);
    p12->addValue("Small1 (Small open-back 10, dynamic mic)");
    p12->addValue("Small2 (Small open-back 10, dynamic mic)");
    p12->addValue("Middle (Open-back 12x1, dynamic mic)");
    p12->addValue("JC-120 (Open-back 12x2, dynamic mic)");
    p12->addValue("Built-In 1 (open-back 12x2, dynamic mic)");
    p12->addValue("Built-In 2 (open-back 12x2, condenser mic)");
    p12->addValue("Built-In 3 (open-back 12x2, condenser mic)");
    p12->addValue("Built-In 4 (open-back 12x2, condenser mic)");
    p12->addValue("Built-In 5 (open-back 12x2, condenser mic)");
    p12->addValue("BD Stack 1 (sealed 12x2, condenser mic)");
    p12->addValue("BD Stack 1 (large sealed 12x2, condenser mic)");
    p12->addValue("MSStack 1 (large sealed 12x4, condenser mic)");
    p12->addValue("MSStack 2 (large sealed 12x4, condenser mic)");
    p12->addValue("Metal Stack (large double stack 12x4, condenser mic)");
    p12->addValue("2-Stack (large double stack 12x4, condenser mic)");
    p12->addValue("3-Stack (large triple stack 12x4, condenser mic)");
    fx->addParam(p12);
    FP4EnumParam* p13 = new FP4EnumParam("Mic distance", "", "Adjust the location of the microphone that is recording the sound of the amplifier, with the mic becoming more distant in the order of 1, 2, 3", "Effect", 0);
    p13->addValue("1");
    p13->addValue("2");
    p13->addValue("3");
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Mic Level", 0, 127, 0, 127, "", "Volume of the microphone", "Effect", 95);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Direct Level", 0, 127, 0, 127, "", "Volume of the direct sound", "Effect", 95);
    fx->addParam(p15);
    FP4ContinuousParam* p16 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
    fx->addParam(p16);
    FP4ContinuousParam* p17 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p17);
    fx->setDescription("Simulate the sound of a guitar amplifier.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x20, "Phaser", 3, 1);
    FP4EnumParam* p1 = new FP4EnumParam("Mode", "", "Number of stages in phaser", "Effect", 0);
    p1->addValue("4-Stage");
    p1->addValue("8-Stage");
    p1->addValue("12-Stage");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Manual", 0, 127, 0, 127, "", "Adjust the basic frequency from which the sound will be modulated", "Effect", 0);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p3->addValue("Hz");
    p3->addValue("Note");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Polarity", "", "Selects whether the left and right phase of the modulation will be the same or the opposite. Inverse: The left and right phase will be opposite. When using a mono source, this spreads the sound. Synchro: The left and right phase will be the same. Select this when inputting a stereo source.", "Effect", 0);
    p7->addValue("Inverse");
    p7->addValue("Synchro");
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Resonance", 0, 127, 0, 127, "", "Amount of feedback", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Cross Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the phaser sound that is fed back into the effect. Negative (-) settings will invert the phase.", "Effect", 0);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Mix", 0, 127, 0, 127, "", "Level of the phase-shifted sound", "Effect", 63.5);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p13);
    fx->setDescription("Stereo Phaser. A phase-shifted sound is added to the original sound and modulated.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x29, "Multi Stage Phaser", 3, 1);
    FP4EnumParam* p1 = new FP4EnumParam("Mode", "", "Number of stages in phaser", "Effect", 0);
    p1->addValue("4-Stage");
    p1->addValue("8-Stage");
    p1->addValue("12-Stage");
    p1->addValue("16-Stage");
    p1->addValue("20-Stage");
    p1->addValue("24-Stage");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Manual", 0, 127, 0, 127, "", "Adjust the basic frequency from which the sound will be modulated", "Effect", 0);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p3->addValue("Hz");
    p3->addValue("Note");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Resonance", 0, 127, 0, 127, "", "Amount of feedback", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Mix", 0, 127, 0, 127, "", "Level of the phase-shifted sound", "Effect", 63.5);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p12);
    fx->setDescription("Extremely high settings of the phase difference produce a deep phase effect.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x2a, "Infinite Phaser", 1, 2);
    FP4EnumParam* p1 = new FP4EnumParam("Mode", "", "Higher values will produce a deeper phaser effect", "Effect", 0);
    p1->addValue("1");
    p1->addValue("2");
    p1->addValue("3");
    p1->addValue("4");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Speed", 0, 127, -100, 100, "", "Speed at which to raise or lower the frequency is modulated. (+: upward, -:downward)", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Resonance", 0, 127, 0, 127, "", "Amount of feedback", "Effect", 0);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Mix", 0, 127, 0, 127, "", "Level of the phase-shifted sound", "Effect", 63.5);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p8);
    fx->setDescription("A phaser that continously raises or lowers the frequency at which the sound is modulated.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x23, "Stereo Flanger", 4, 6);
    FP4EnumParam* p1 = new FP4EnumParam("Filter Type", "", "Type of filter. Off: No filter is used. Lpf: Cuts the frequency above the cutoff freq. Hpf: Cuts the frequency below the cutoff freq.", "Effect", 0);
    p1->addValue("Off");
    p1->addValue("Lpf");
    p1->addValue("Hpf");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Cutoff Frequency", 0, 16, 200, 8000, "Hz", "Basic frequency of the filter", "Effect", 8);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the flanger is heard", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("Hz");
    p4->addValue("Note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative (-) settings will invert the phase", "Effect", 0);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the flanger sound (0: 100% direct. 100: 100% flanger)", "Effect", 50);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p13);
    fx->setDescription("A stereo flanger. (The LFO has the same phase for left and right.) It produces a metallic resonance that rises and falls like a jet airplane taking off or landing. A filter is provided so that you can adjust the timbre of the flanged sound.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x27, "3D Flanger", 4, 6);
    FP4EnumParam* p1 = new FP4EnumParam("Filter Type", "", "Type of filter. Off: No filter is used. Lpf: Cuts the frequency above the cutoff freq. Hpf: Cuts the frequency below the cutoff freq.", "Effect", 0);
    p1->addValue("Off");
    p1->addValue("Lpf");
    p1->addValue("Hpf");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Cutoff Frequency", 0, 16, 200, 8000, "Hz", "Basic frequency of the filter", "Effect", 8);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the flanger is heard", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("Hz");
    p4->addValue("Note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative (-) settings will invert the phase", "Effect", 0);
    fx->addParam(p9);
    FP4EnumParam* p10 = new FP4EnumParam("Output mode", "", "Adjusts the method that will be used to hear the sound that is output to the OUTPUT jacks. The optimal 3D effect will be achieved if you select Speakers when using speakers and Phones when using headphones.", "Effect", 0);
    p10->addValue("Speaker");
    p10->addValue("Phones");
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the flanger sound (0: 100% direct. 100: 100% flanger)", "Effect", 50);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p14);
    fx->setDescription("This applies a 3D effect to the flanger sound. The flanger sound will be positioned 90 degrees left and 90 degrees right.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x28, "2 Band Flanger", 3, 10);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Split Freq", 0, 16, 200, 8000, "Hz", "Frequency at which the low and high band will be divided", "Effect", 8);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Low Pre-Delay", 0, 125, 0, 100, "ms", "Delay time from when the original sound is heard to when the low-range flanger sound is heard", "Effect", 0);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Low Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p3->addValue("Hz");
    p3->addValue("Note");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Low Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz) of the low-range flanger", "Effect", 1);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note) of the low-range fkanger", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Low Depth", 0, 127, 0, 127, "", "Depth of modulation of the low-range flanger", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Low Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound of the low-range flanger", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Low Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the low-range flanger sound that is fed back into the effect. Negative (-) settings will invert the phase", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("High Pre-Delay", 0, 125, 0, 100, "ms", "Delay time from when the original sound is heard to when the high-range flanger sound is heard", "Effect", 0);
    fx->addParam(p9);
    FP4EnumParam* p10 = new FP4EnumParam("High Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p10->addValue("Hz");
    p10->addValue("Note");
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("High Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz) of the high-range flanger", "Effect", 1);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("High Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note) of the high-range fkanger", "Effect", 0);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("High Depth", 0, 127, 0, 127, "", "Depth of modulation of the high-range flanger", "Effect", 0);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("High Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound of the high-range flanger", "Effect", 0);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("High Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the high-range flanger sound that is fed back into the effect. Negative (-) settings will invert the phase", "Effect", 0);
    fx->addParam(p15);
    FP4ContinuousParam* p16 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the flanger sound (0: 100% direct. 100: 100% flanger)", "Effect", 50);
    fx->addParam(p16);
    FP4ContinuousParam* p17 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p17);
    fx->setDescription("A flanger that lets you apply an effect independently to the low-frequency and high-frequency ranges.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x21, "Auto Wah", 6, 1);
    FP4EnumParam* p1 = new FP4EnumParam("Filter Type", "", "Type of filter. Lpf: The wah effect will be applied over a wide frequency range. Bpf: The wah effect will be applied over a narrow frequency range.", "Effect", 0);
    p1->addValue("Lpf");
    p1->addValue("Bpf");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Center Frequency", 0, 127, 0, 127, "", "Adjust the center frequency at which the effect is applied", "Effect", 63.5);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Peak", 0, 127, 0, 127, "", "Adjusts the amount of the wah effect that will occur in the range of the center frequency. Set a higher value for Q to narrow the range to be affected.", "Effect", 0);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Sensitivity", 0, 127, 0, 127, "", "Adjusts the sensitivity with which the filter is controlled", "Effect", 63.5);
    fx->addParam(p4);
    FP4EnumParam* p5 = new FP4EnumParam("Polarity", "", "Sets the direction in which the frequency will change when the auto-wah filter is modulated. Up: The filter will change toward a higher frequency. Down: The filter will change toward a lower frequency.", "Effect", 0);
    p5->addValue("Up");
    p5->addValue("Down");
    fx->addParam(p5);
    FP4EnumParam* p6 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p6->addValue("Hz");
    p6->addValue("Note");
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Adjusts the degree of phase shift of the left and right sounds when the wah effect is applied", "Effect", 0);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p13);
    fx->setDescription("Cyclically controls a filter to create cyclic change in timbre.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x03, "Humanizer", 6, 1);
    FP4BooleanParam* p1 = new FP4BooleanParam("Drive Enable", "Turns drive on/off", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume.", "Effect", 0);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Vowel 1", "", "Selects the vowel", "Effect", 0);
    p3->addValue("a");
    p3->addValue("e");
    p3->addValue("i");
    p3->addValue("o");
    p3->addValue("u");
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Vowel 2", "", "Selects the vowel", "Effect", 0);
    p4->addValue("a");
    p4->addValue("e");
    p4->addValue("i");
    p4->addValue("o");
    p4->addValue("u");
    fx->addParam(p4);
    FP4EnumParam* p5 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p5->addValue("Hz");
    p5->addValue("Note");
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Effect Depth", "Effect", 0);
    fx->addParam(p8);
    FP4BooleanParam* p9 = new FP4BooleanParam("Input Sync Enable", "Determines whether the LFO for switching the vowels is reset by the input signal (ON) or not (OFF). ", "Effect", 0);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Input Sync Threshold", 0, 127, 0, 127, "", "Volume at which reset is applied", "Effect", 0);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Manual", 0, 127, 0, 127, "", "Point at which Vowel 1/2 switch 49 or less: Vowel 1 will have a longer duration. 50: Vowel 1 and 2 will be of equal duration. 51 or more: Vowel 2 will have a longer duration.", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Stereo location of the output sound", "Effect", 63.5);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p15);
    fx->setDescription("Adds a vowel character to the sound, making it similar to a human voice.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x2b, "Ring Modulator", 0, 5);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Frequency", 0, 127, 0, 127, "", "Adjusts the frequency at which the modulation is applied", "Effect", 63.5);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Sensitivity", 0, 127, 0, 127, "", "Adjusts the amount of frequency modulation applied", "Effect", 63.5);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Polarity", "", "Determines whether the frequency modulation moves towards higher frequencies (Up) or lower frequencies (Down).", "Effect", 0);
    p3->addValue("Up");
    p3->addValue("Down");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p7);
    fx->setDescription("This is an effect that applies amplitude modulation (AM) to the input signal, producing bell-like sounds. You can also change the modulation frequency in response to changes in the volume of the sound sent into the effect.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x25, "Tremolo", 2, 4);
    FP4EnumParam* p1 = new FP4EnumParam("Mod Wave", "", "Modulation wave", "Effect", 0);
    p1->addValue("Triangle");
    p1->addValue("Square");
    p1->addValue("Sinus");
    p1->addValue("Saw1");
    p1->addValue("Saw2");
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p2->addValue("Hz");
    p2->addValue("Note");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth to which the effect is applied", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p8);
    fx->setDescription("Cyclically modulates the volume to add tremolo effect to the sound.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x26, "Auto Pan", 2, 4);
    FP4EnumParam* p1 = new FP4EnumParam("Mod Wave", "", "Modulation wave", "Effect", 0);
    p1->addValue("Triangle");
    p1->addValue("Square");
    p1->addValue("Sinus");
    p1->addValue("Saw1");
    p1->addValue("Saw2");
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p2->addValue("Hz");
    p2->addValue("Note");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth to which the effect is applied", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p8);
    fx->setDescription("Cyclically modulates the stereo location of the sound.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x2c, "Slicer", 2, 7);
    FP4EnumParam* p1 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p1->addValue("Hz");
    p1->addValue("Note");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Attack", 0, 127, 0, 127, "", "Speed at which the level changes between steps", "Effect", 0);
    fx->addParam(p4);
    FP4BooleanParam* p5 = new FP4BooleanParam("Input Sync Enable", "Determines whether an input note will cause the sequence to resume from the first step of the sequence (ON) or not (OFF).", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Input Sync Threshold", 0, 127, 0, 127, "", "Volume at which an input note is detected", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Mode", "", "Sets the manner in which the volume changes as one step progresses to the next. Legato: The change in volume from one step’s level to the next remains unaltered. If the level of a following step is the same as the one preceding it, there is no change in volume. Slash: The level is momentarily set to 0 before progressing to the level of the next step. This change in volume occurs even if the level of the following step is the same as the preceding step.", "Effect", 0);
    p7->addValue("Legato");
    p7->addValue("Slash");
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Shuffle", 0, 127, 0, 127, "", "Timing of volume changes for even-numbered steps (step 2, step 4, step 6...). The higher the value, the later the beat progresses.", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p9);
    fx->setDescription("By applying successive cuts to the sound, this effect turns a conventional sound into a sound that appears to be played as a backing phrase. This is especially effective when applied to sustain-type sounds.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x30, "Compressor", 1, 0);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Attack", 0, 127, 0, 127, "", "Speed at which the compression starts", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Threshold", 0, 127, 0, 127, "", "Adjust the volume at which the compression begins", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Post Gain", 0, 18, 0, 18, "dB", "Adjust the output gain", "Effect", 9);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p6);
    fx->setDescription("Flattens out high levels and boosts low levels, smoothing out fluctuations in volume.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x31, "Limiter", 1, 2);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Release", 0, 127, 0, 127, "", "Adjusts the time after which the signal volume falls below the threshold level until compression is no longer applied", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Threshold", 0, 127, 0, 127, "", "Adjust the volume at which the compression begins", "Effect", 0);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Ratio", "", "Compression ratio", "Effect", 0);
    p3->addValue("1.5:1");
    p3->addValue("2:1");
    p3->addValue("4:1");
    p3->addValue("100:1");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Post Gain", 0, 18, 0, 18, "dB", "Adjust the output gain", "Effect", 9);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p7);
    fx->setDescription("Compresses signals that exceed a specified volume level, preventing distortion from occurring.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x42, "Stereo Chorus", 4, 6);
    FP4EnumParam* p1 = new FP4EnumParam("Filter Type", "", "Type of filter. Off: No filter is used. Lpf: Cuts the frequency above the cutoff freq. Hpf: Cuts the frequency below the cutoff freq.", "Effect", 0);
    p1->addValue("Off");
    p1->addValue("Lpf");
    p1->addValue("Hpf");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Cutoff Frequency", 0, 16, 200, 8000, "Hz", "Basic frequency of the filter", "Effect", 8);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the flanger is heard", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("Hz");
    p4->addValue("Note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p12);
    fx->setDescription("This is a stereo chorus. A filter is provided so that you can adjust the timbre of the chorus sound.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x40, "Hexa Chorus", 2, 4);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the chorus sound is heard", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p2->addValue("Hz");
    p2->addValue("Note");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "H", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Pre Delay Deviation", 0, 20, 0, 20, "", "Adjusts the differences in Pre Delay between each chorus sound", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Depth Deviation", 0, 20, 0, 20, "", "Adjusts the differences in modulation depth between each chorus sound.", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Pan deviation", 0, 20, 0, 20, "", "Adjusts the difference in stereo location between each chorus sound. 0: All chorus sounds will be in the center. 20: Each chorus sound will be spaced at 60 degree intervals relative to the center.", "Effect", 10);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p10);
    fx->setDescription("Uses a six-phase chorus (six layers of chorused sound) to give richness and spatial spread to the sound.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x41, "Tremolo Chorus", 4, 6);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Pre Delay Deviation", 0, 20, 0, 20, "", "Adjusts the differences in Pre Delay between each chorus sound", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Chorus Rate Mode", "", "When this is set to note the chorus is synchronized with the tempo.", "Effect", 0);
    p2->addValue("Hz");
    p2->addValue("Note");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "H", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p5);
    FP4EnumParam* p6 = new FP4EnumParam("Tremolo Rate Mode", "", "When this is set to note the tremolo is synchronized with the tempo.", "Effect", 0);
    p6->addValue("Hz");
    p6->addValue("Note");
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Tremolo Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Tremolo Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Tremolo Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Tremolo Separation", 0, 127, 0, 127, "", "Spread of tremolo effect", "Effect", 0);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Tremolo Phase", 0, 90, 0, 180, "deg", "Spatial spread of the tremolo effect", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p13);
    fx->setDescription("This is a chorus effect with added Tremolo (cyclic modulation of volume).");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x43, "Space D", 2, 4);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the chorus sound is heard", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p2->addValue("Hz");
    p2->addValue("Note");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p10);
    fx->setDescription("This is a multiple chorus that applies two-phase modulation in stereo. It gives no impression of modulation, but produces a transparent chorus effect.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x44, "3D Chorus", 4, 6);
    FP4EnumParam* p1 = new FP4EnumParam("Filter Type", "", "Type of filter. Off: No filter is used. Lpf: Cuts the frequency above the cutoff freq. Hpf: Cuts the frequency below the cutoff freq.", "Effect", 0);
    p1->addValue("Off");
    p1->addValue("Lpf");
    p1->addValue("Hpf");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Cutoff Frequency", 0, 16, 200, 8000, "Hz", "Basic frequency of the filter", "Effect", 8);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the chorus sound is heard", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("Hz");
    p4->addValue("Note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
    fx->addParam(p8);
    FP4EnumParam* p9 = new FP4EnumParam("Output mode", "", "Adjusts the method that will be used to hear the sound that is output to the OUTPUT jacks. The optimal 3D effect will be achieved if you select Speakers when using speakers and Phones when using headphones.", "Effect", 0);
    p9->addValue("Speaker");
    p9->addValue("Phones");
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p13);
    fx->setDescription("This applies a 3D effect to the chorus sound. The chorus sound will be positioned 90 degrees left and 90 degrees right.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x45, "2Band Chorus", 5, 11);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Split Freq", 0, 16, 200, 8000, "Hz", "Frequency at which the low and high band will be divided", "Effect", 8);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Low Pre-Delay", 0, 125, 0, 100, "ms", "Delay time from when the original sound is heard to when the low-range chorus sound is heard", "Effect", 0);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Low Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p3->addValue("Hz");
    p3->addValue("Note");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Low Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz) of the low-range chorus", "Effect", 1);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note) of the low-range fkanger", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Low Depth", 0, 127, 0, 127, "", "Depth of modulation of the low-range chorus", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Low Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound of the low-range chorus", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("High Pre-Delay", 0, 125, 0, 100, "ms", "Delay time from when the original sound is heard to when the high-range chorus sound is heard", "Effect", 0);
    fx->addParam(p8);
    FP4EnumParam* p9 = new FP4EnumParam("High Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p9->addValue("Hz");
    p9->addValue("Note");
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("High Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz) of the high-range chorus", "Effect", 1);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("High Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note) of the high-range fkanger", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("High Depth", 0, 127, 0, 127, "", "Depth of modulation of the high-range chorus", "Effect", 0);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("High Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound of the high-range chorus", "Effect", 0);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the chorus sound (0: 100% direct. 100: 100% chorus)", "Effect", 50);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p15);
    fx->setDescription("A chorus effect that lets you apply an effect independently to the low-frequency and high-frequency ranges.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x22, "Rotary", 0, 9);
    FP4EnumParam* p1 = new FP4EnumParam("Rotary Speed", "", "Simultaneously switch the rotational speed of the low frequency rotor and high frequency rotor. Slow: Slows down the rotation to the Slow Rate. Fast: Speeds up the rotation to the Fast Rate.", "Effect", 0);
    p1->addValue("Slow");
    p1->addValue("Fast");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Woofer Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the low frequency rotor.", "Effect", 1);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Woofer Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the low frequency rotor.", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Woofer Acceleration", 0, 15, 0, 15, "", "Adjusts the time it takes the low frequency rotor to reach the newly selected speed when switching from fast to slow (or slow to fast) speed.  Lower values will require longer times.", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Woofer level", 0, 127, 0, 127, "", "Volume of the low frequency rotor.", "Effect", 95);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Tweeter Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the high frequency rotor.", "Effect", 1);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Tweeter Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the high frequency rotor.", "Effect", 1);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Tweeter Acceleration", 0, 15, 0, 15, "", "Adjusts the time it takes the high frequency rotor to reach the newly selected speed when switching from fast to shigh (or shigh to fast) speed.  higher values will require longer times.", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Tweeter level", 0, 127, 0, 127, "", "Volume of the high frequency rotor.", "Effect", 95);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Separation", 0, 127, 0, 127, "", "Spatial dispertion of the sound", "Effect", 0);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p11);
    fx->setDescription("The Rotary effect simulates the sound of the rotary speakers often used with the electric organs of the past. Since the movement of the high range and low range rotors can be set independently, the unique type of modulation characteristic of these speakers can be simulated quite closely. This effect is most suitable for electric organ Patches. ");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x2d, "Rotary2", 0, 1);
    FP4EnumParam* p1 = new FP4EnumParam("Rotary Speed", "", "Rotational speed of the rotating speaker", "Effect", 0);
    p1->addValue("Slow");
    p1->addValue("Fast");
    fx->addParam(p1);
    FP4BooleanParam* p2 = new FP4BooleanParam("Brake", "Switches the rotation of the rotary speaker. When this is turned on, the rotation will gradually stop. When it is turned off, the rotation will gradually resume.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Woofer Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the low frequency rotor.", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Woofer Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the low frequency rotor.", "Effect", 1);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Woofer Trans Up", 0, 127, 0, 127, "", "Adjusts the rate at which the woofer rotation speeds up when the rotation is switched from slow to fast", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Woofer Trans Down", 0, 127, 0, 127, "", "Adjusts the rate at which the woofer rotation slows down when the rotation is switched from fast to slow", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Woofer level", 0, 127, 0, 127, "", "Volume of the low frequency rotor.", "Effect", 95);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Tweeter Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the high frequency rotor.", "Effect", 1);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Tweeter Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the high frequency rotor.", "Effect", 1);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Tweeter Trans Up", 0, 127, 0, 127, "", "Adjusts the rate at which the tweeter rotation speeds up when the rotation is switched from slow to fast", "Effect", 0);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Tweeter Trans Down", 0, 127, 0, 127, "", "Adjusts the rate at which the tweeter rotation slows down when the rotation is switched from fast to shigh", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Tweeter level", 0, 127, 0, 127, "", "Volume of the high frequency rotor.", "Effect", 95);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Spread", 0, 10, 0, 10, "", "Sets the rotary speaker stereo image. The higher the value is set, the wider the sound is spread out.'", "Effect", 0);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p15);
    FP4ContinuousParam* p16 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p16);
    fx->setDescription("This type provides modified response for the rotary speaker, with the low end boosted further. This effect is a descendant of the Roland VK Series' built-in rotary speaker.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x03, 0x00, "Rotary Multi", 8, 5);
    FP4BooleanParam* p1 = new FP4BooleanParam("Vibrato/Chorus On", "Switches the vibrato and chorus effect", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Vibrato/Chorus Type", "", "Vibrato and chorus effect types V-1, V-2, V-3: Adds a wavering (vibrato) that is created by changes in the pitch.The effect deepens as the value is increased C-1, C-2, C-3: Adds a fullness and breadth (chorus) to the sound.The effect deepens as the value is increased.", "Effect", 0);
    p2->addValue("V-1");
    p2->addValue("V-2");
    p2->addValue("V-3");
    p2->addValue("C-1");
    p2->addValue("C-2");
    p2->addValue("C-3");
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Vibrato/Chorus Vintage", "", "This reproduces the subtle differences in the vibrato and chorus effects in organs built in different years.", "Effect", 0);
    p3->addValue("'50");
    p3->addValue("'60");
    p3->addValue("'70");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Vibrato/Chorus Level", 0, 127, 0, 127, "", "Vibrato/chorus effect volume", "Effect", 95);
    fx->addParam(p4);
    FP4BooleanParam* p5 = new FP4BooleanParam("Overdrive On", "Switches the overdrive effect on and off", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Overdrive Drive", 0, 127, 0, 127, "", "Amount of distortion", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Overdrive Level", 0, 127, 0, 127, "", "Overdrive effect volume.", "Effect", 95);
    fx->addParam(p7);
    FP4BooleanParam* p8 = new FP4BooleanParam("Rotary On", "Switches the rotary effect on and off", "Effect", 0);
    fx->addParam(p8);
    FP4EnumParam* p9 = new FP4EnumParam("Rotary Speed", "", "Low and high frequency rotation speeds.", "Effect", 0);
    p9->addValue("Slow");
    p9->addValue("Fast");
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Woofer Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the low frequency rotor.", "Effect", 1);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Woofer Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the low frequency rotor.", "Effect", 1);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Woofer Acceleration", 0, 15, 0, 15, "", "Adjusts the time it takes the low frequency rotor to reach the newly selected speed when switching from fast to slow (or slow to fast) speed.  Lower values will require longer times.", "Effect", 0);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Woofer level", 0, 127, 0, 127, "", "Volume of the low frequency rotor.", "Effect", 95);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Tweeter Slow Speed", 1, 127, 0.05, 10, "Hz", "Slow speed of the high frequency rotor.", "Effect", 1);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Tweeter Fast Speed", 1, 127, 0.05, 10, "Hz", "Fast speed of the high frequency rotor.", "Effect", 1);
    fx->addParam(p15);
    FP4ContinuousParam* p16 = new FP4ContinuousParam("Tweeter Acceleration", 0, 15, 0, 15, "", "Adjusts the time it takes the high frequency rotor to reach the newly selected speed when switching from fast to shigh (or shigh to fast) speed.  higher values will require longer times.", "Effect", 0);
    fx->addParam(p16);
    FP4ContinuousParam* p17 = new FP4ContinuousParam("Tweeter level", 0, 127, 0, 127, "", "Volume of the high frequency rotor.", "Effect", 95);
    fx->addParam(p17);
    FP4ContinuousParam* p18 = new FP4ContinuousParam("Separation", 0, 127, 0, 127, "", "Spatial dispertion of the sound", "Effect", 0);
    fx->addParam(p18);
    FP4ContinuousParam* p19 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p19);
    fx->setDescription("This is an effect combining the VK series internal effect with an organ effect with the same features. It comprises vibrato/chorus, overdrive, and rotary effects.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x5b, "Stereo Delay 1", 9, 13);
    FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p1->addValue("ms");
    p1->addValue("note");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("ms");
    p4->addValue("note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Phase Left", "", "Phase of the delay sound.", "Effect", 0);
    p7->addValue("Normal");
    p7->addValue("Inverse");
    fx->addParam(p7);
    FP4EnumParam* p8 = new FP4EnumParam("Phase Right", "", "Phase of the delay sound.", "Effect", 0);
    p8->addValue("Normal");
    p8->addValue("Inverse");
    fx->addParam(p8);
    FP4EnumParam* p9 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
    p9->addValue("Normal");
    p9->addValue("Cross");
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p15);
    fx->setDescription("This is a stereo delay.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x5c, "Stereo Delay 2", 9, 13);
    FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p1->addValue("ms");
    p1->addValue("note");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("ms");
    p4->addValue("note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Phase Left", "", "Phase of the delay sound.", "Effect", 0);
    p7->addValue("Normal");
    p7->addValue("Inverse");
    fx->addParam(p7);
    FP4EnumParam* p8 = new FP4EnumParam("Phase Right", "", "Phase of the delay sound.", "Effect", 0);
    p8->addValue("Normal");
    p8->addValue("Inverse");
    fx->addParam(p8);
    FP4EnumParam* p9 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
    p9->addValue("Normal");
    p9->addValue("Cross");
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p15);
    fx->setDescription("This is a stereo delay.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x5d, "Stereo Delay 3", 9, 13);
    FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p1->addValue("ms");
    p1->addValue("note");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("ms");
    p4->addValue("note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Phase Left", "", "Phase of the delay sound.", "Effect", 0);
    p7->addValue("Normal");
    p7->addValue("Inverse");
    fx->addParam(p7);
    FP4EnumParam* p8 = new FP4EnumParam("Phase Right", "", "Phase of the delay sound.", "Effect", 0);
    p8->addValue("Normal");
    p8->addValue("Inverse");
    fx->addParam(p8);
    FP4EnumParam* p9 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
    p9->addValue("Normal");
    p9->addValue("Cross");
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p15);
    fx->setDescription("This is a stereo delay.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x5e, "Stereo Delay 4", 9, 13);
    FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p1->addValue("ms");
    p1->addValue("note");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("ms");
    p4->addValue("note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Phase Left", "", "Phase of the delay sound.", "Effect", 0);
    p7->addValue("Normal");
    p7->addValue("Inverse");
    fx->addParam(p7);
    FP4EnumParam* p8 = new FP4EnumParam("Phase Right", "", "Phase of the delay sound.", "Effect", 0);
    p8->addValue("Normal");
    p8->addValue("Inverse");
    fx->addParam(p8);
    FP4EnumParam* p9 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
    p9->addValue("Normal");
    p9->addValue("Cross");
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p15);
    fx->setDescription("This is a stereo delay.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x5f, "Stereo Delay 5", 9, 13);
    FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p1->addValue("ms");
    p1->addValue("note");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("ms");
    p4->addValue("note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Phase Left", "", "Phase of the delay sound.", "Effect", 0);
    p7->addValue("Normal");
    p7->addValue("Inverse");
    fx->addParam(p7);
    FP4EnumParam* p8 = new FP4EnumParam("Phase Right", "", "Phase of the delay sound.", "Effect", 0);
    p8->addValue("Normal");
    p8->addValue("Inverse");
    fx->addParam(p8);
    FP4EnumParam* p9 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
    p9->addValue("Normal");
    p9->addValue("Cross");
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p15);
    fx->setDescription("This is a stereo delay.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x50, "Monaural Delay", 2, 9);
    FP4EnumParam* p1 = new FP4EnumParam("Delay Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p1->addValue("ms");
    p1->addValue("note");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Time (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Time (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Phase", "", "Phase of the delay sound.", "Effect", 0);
    p4->addValue("Normal");
    p4->addValue("Inverse");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Panning of the delay sound.", "Effect", 63.5);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p11);
    fx->setDescription("A delay that provides a long delay time.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x51, "Modulation Delay", 12, 16);
    FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p1->addValue("ms");
    p1->addValue("note");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("ms");
    p4->addValue("note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 1270, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Feedback mode", "", "Selects the way in which delay sound is fed back into the effect. (See the figures above.) ", "Effect", 0);
    p7->addValue("Normal");
    p7->addValue("Cross");
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p9);
    FP4EnumParam* p10 = new FP4EnumParam("Rate Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p10->addValue("Hz");
    p10->addValue("Note");
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Rate (Hz)", 1, 127, 0.05, 10, "", "Rate of modulation (Hz)", "Effect", 1);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Rate (Note)", 0, 21, 0, 21, "", "Rate of modulation (Note)", "Effect", 0);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Phase", 0, 90, 0, 180, "deg", "Spatial spread of the sound", "Effect", 0);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p15);
    FP4ContinuousParam* p16 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p16);
    FP4ContinuousParam* p17 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p17);
    FP4ContinuousParam* p18 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p18);
    fx->setDescription("Adds modulation to the delayed sound.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x52, "Triple Tap Delay", 9, 16);
    FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p1->addValue("ms");
    p1->addValue("note");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("ms");
    p4->addValue("note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Delay Center Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p7->addValue("ms");
    p7->addValue("note");
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Center (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Delay Center (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Center Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay that is fed back into the effect.", "Effect", 49);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Left Level", 0, 127, 0, 127, "", "Volume of left delay.", "Effect", 95);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Right Level", 0, 127, 0, 127, "", "Volume of right delay.", "Effect", 95);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Center Level", 0, 127, 0, 127, "", "Volume of center delay.", "Effect", 95);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p15);
    FP4ContinuousParam* p16 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p16);
    FP4ContinuousParam* p17 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p17);
    FP4ContinuousParam* p18 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p18);
    fx->setDescription("Produce three delay sounds: left, center and right.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x57, "3D Delay", 9, 17);
    FP4EnumParam* p1 = new FP4EnumParam("Delay Left Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p1->addValue("ms");
    p1->addValue("note");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Delay Left (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Left (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Delay Right Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p4->addValue("ms");
    p4->addValue("note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Right (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Right (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Delay Center Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p7->addValue("ms");
    p7->addValue("note");
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Center (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Delay Center (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Center Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay that is fed back into the effect.", "Effect", 49);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Left Level", 0, 127, 0, 127, "", "Volume of left delay.", "Effect", 95);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Right Level", 0, 127, 0, 127, "", "Volume of right delay.", "Effect", 95);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Center Level", 0, 127, 0, 127, "", "Volume of center delay.", "Effect", 95);
    fx->addParam(p14);
    FP4EnumParam* p15 = new FP4EnumParam("Output mode", "", "Adjusts the method that will be used to hear the sound that is output to the OUTPUT jacks. The optimal 3D effect will be achieved if you select Speakers when using speakers and Phones when using headphones.", "Effect", 0);
    p15->addValue("Speaker");
    p15->addValue("Phones");
    fx->addParam(p15);
    FP4ContinuousParam* p16 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p16);
    FP4ContinuousParam* p17 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p17);
    FP4ContinuousParam* p18 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p18);
    FP4ContinuousParam* p19 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p19);
    fx->setDescription("This applies a 3D effect to the delayed sound. The delayed sound will be positioned 90 degrees left and 90 degrees right");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x59, "Tape Echo", 1, 11);
    FP4EnumParam* p1 = new FP4EnumParam("Mode", "", "Combination of playback heads to use. Select from three different heads with different delay times. S: short M: middle L: long.", "Effect", 0);
    p1->addValue("S");
    p1->addValue("M");
    p1->addValue("L");
    p1->addValue("S+M");
    p1->addValue("S+L");
    p1->addValue("M+L");
    p1->addValue("S+M+L");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Repeat Rate", 0, 127, 0, 127, "", "Tape speed. Increasing this value will shorten the spacing of the delayed sounds.", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Intensity", 0, 127, 0, 127, "", "Amount of delay repeats", "Effect", 0);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Bass", 0, 30, -15, 15, "dB", "Boost/Cut for the lower range of the sound.", "Effect", 15);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Treble", 0, 30, -15, 15, "dB", "Boost/Cut for the upper range of the sound.", "Effect", 15);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Head S Pan", 0, 127, -64, 63, "Panning for the short playback head", "", "Effect", 63.5);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Head M Pan", 0, 127, -64, 63, "Panning for the middle playback head", "", "Effect", 63.5);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Head L Pan", 0, 127, -64, 63, "Panning for the long playback head", "", "Effect", 63.5);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Tape Distortion", 0, 5, 0, 5, "", "Amount of tape-dependent distortion to be added This simulates the slight tonal changes that can be detected by signal-analysis equipment. Increasing this value will increase the distortion.", "Effect", 0);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Wow/Flutter", 0, 127, 0, 127, "", "Speed of wow/flutter (complex variation in pitch caused by tape wear and rotational irregularity)", "Effect", 0);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Wow/Flutter Depth", 0, 127, 0, 127, "", "Depth of wow/flutter.", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Echo Level", 0, 127, 0, 127, "", "Volume of echo sound", "Effect", 95);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Direct Level", 0, 127, 0, 127, "", "Volume of the original sound.", "Effect", 95);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p14);
    fx->setDescription("A virtual tape echo that produces a realistic tape echo sound. This emulates the tape echo section of a Roland RE-201 Space Echo.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x5a, "Reverse Delay", 2, 10);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Threshold", 0, 127, 0, 127, "", "Volume at which the reverse delay will begin to apply", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Delay Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p2->addValue("ms");
    p2->addValue("note");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Delay Time (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Delay Time (note)", 0, 21, 0, 21, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Feedback", 49, 89, 0, 80, "%", "Adjusts the amount of delay sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("HF Damping", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect is filtered out. If you don’t want to filter out any high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Panning", 0, 127, -64, 63, "", "Panning of the delay sound.", "Effect", 63.5);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Level", 0, 127, 0, 127, "", "Volume of the delay sound.", "Effect", 95);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p12);
    fx->setDescription("This is a reverse delay that adds a reversed and delayed sound to the input sound. A tap delay is connected immediately after the reverse delay.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x72, "Lo-Fi", 1, 6);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Pre filter type", 0, 5, 1, 6, "", "Selects the type of filter to be applied to the sound before it passes through the Lo-Fi effect.", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Intensity", 0, 8, 1, 9, "", "Degrades the sound quality. The sound quality gets poorer as this value is increased.", "Effect", 0);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Post filter type", "", "Type of filter. Off: No filter is used. Lpf: Cuts the frequency range above the cutoff. Hpf: Cuts the frequency range below the cutoff.", "Effect", 0);
    p3->addValue("Off");
    p3->addValue("Lpf");
    p3->addValue("Hpf");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Post filter cutoff", 0, 16, 200, 8000, "Hz", "Basic frequency of the cutoff filter.", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p8);
    fx->setDescription("This is an effect that intentionally degrades the sound quality for creative purposes.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x75, "Telephone", 0, 2);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Voice Quality", 0, 15, 0, 15, "", "Audio quality of the telphone voice.", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Treble", 0, 30, -15, 15, "dB", "Bandwidth of the telephone voice.", "Effect", 15);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p4);
    fx->setDescription("Simulates sound going through a telphone.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x01, 0x56, "Gate Reverb", 0, 5);
    FP4EnumParam* p1 = new FP4EnumParam("Type", "", "Type of reverb. Normal: conventional gated reverb. Reverse: backwards reverb. Sweep1: the reverberant sound moves from right to left. Sweep2: the reverberant sound moves from left to right.", "Effect", 0);
    p1->addValue("Normal");
    p1->addValue("Reverse");
    p1->addValue("Sweep1");
    p1->addValue("Sweep2");
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Pre Delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from when the direct sounds begins until the delayed sound is heard", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Gate Time", 0, 99, 5, 500, "ms", "Adjusts the time from when the delay is heard until it disappears.", "Effect", 0);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Low Gain", 0, 30, -15, 15, "dB", "Gain of the low range", "Effect", 15);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("High Gain", 0, 30, -15, 15, "dB", "Gain of the high range", "Effect", 15);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Balance", 0, 100, 0, 100, "", "Volume balance between the direct sound and the effect sound (0: 100% direct. 100: 100% effect)", "Effect", 50);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p7);
    fx->setDescription("This is a special type of delay in which the reverberant sound is cut off before its natural length.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x00, "Overdrive -> Chorus", 4, 7);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Overdrive Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Overdrive Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the chorus sound is heard", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Chorus Rate Mode", "", "When set to note the chorus is synchronized with the tempo.", "Effect", 0);
    p4->addValue("Hz");
    p4->addValue("Note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Chorus Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the chorus and the sound that is not.", "Effect", 50);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p9);
    fx->setDescription("This effect connects an overdrive and a chorus in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x01, "Overdrive -> Flanger", 4, 8);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Overdrive Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Overdrive Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Flanger Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the flanger sound is heard", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Flanger Rate Mode", "", "When set to note the flanger is synchronized with the tempo.", "Effect", 0);
    p4->addValue("Hz");
    p4->addValue("Note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Flanger Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Flanger Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Flanger Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Flanger Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative settings will inverse the phase.", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Flanger Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the flanger and the sound that is not.", "Effect", 50);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p10);
    fx->setDescription("This effect connects an overdrive and a flanger in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x02, "Overdrive -> Delay", 0, 7);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Overdrive Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Overdrive Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Delay Mode", "", "When set to note the delay is synchronized with the tempo.", "Effect", 0);
    p3->addValue("Hz");
    p3->addValue("Note");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Delay Time (ms)", 0, 127, 0, 2540, "", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Time (note)", 0, 21, 0, 21, "", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Feedback", 49, 89, 0, 80, "%", "Adjusts the proportion of the delayed sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Delay HF Damp", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect will be cut. If you do not want to cut the high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the delay and the sound that is not.", "Effect", 50);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p9);
    fx->setDescription("This effect connects an overdrive and a delay in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x03, "Distortion -> Chorus", 4, 7);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Distortion Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Distortion Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the chorus sound is heard", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Chorus Rate Mode", "", "When set to note the chorus is synchronized with the tempo.", "Effect", 0);
    p4->addValue("Hz");
    p4->addValue("Note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Chorus Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the chorus and the sound that is not.", "Effect", 50);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p9);
    fx->setDescription("This effect connects an distortion and a chorus in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x04, "Distortion -> Flanger", 4, 8);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Distortion Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Distortion Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Flanger Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the flanger sound is heard", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Flanger Rate Mode", "", "When set to note the flanger is synchronized with the tempo.", "Effect", 0);
    p4->addValue("Hz");
    p4->addValue("Note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Flanger Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Flanger Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Flanger Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Flanger Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative settings will inverse the phase.", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Flanger Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the flanger and the sound that is not.", "Effect", 50);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p10);
    fx->setDescription("This effect connects an distortion and a flanger in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x05, "Distortion -> Delay", 0, 7);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Distortion Drive", 0, 127, 0, 127, "", "Degree of distortion. Also changes the volume", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Distortion Pan", 0, 127, -64, 64, "", "Stereo location of the distortion", "Effect", 63.5);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Delay Mode", "", "When set to note the delay is synchronized with the tempo.", "Effect", 0);
    p3->addValue("Hz");
    p3->addValue("Note");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Delay Time (ms)", 0, 127, 0, 2540, "", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Time (note)", 0, 21, 0, 21, "", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Feedback", 49, 89, 0, 80, "%", "Adjusts the proportion of the delayed sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Delay HF Damp", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect will be cut. If you do not want to cut the high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the delay and the sound that is not.", "Effect", 50);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p9);
    fx->setDescription("This effect connects an distortion and a delay in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x06, "Enhancer -> Chorus", 4, 7);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Enhancer Sensitivity", 0, 127, 0, 127, "", "Sensitivity of the enhancer", "Effect", 63.5);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Enhancer Mix", 0, 127, 0, 127, "", "Level of the overtones generated by the enhancer", "Effect", 63.5);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the chorus sound is heard", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Chorus Rate Mode", "", "When set to note the chorus is synchronized with the tempo.", "Effect", 0);
    p4->addValue("Hz");
    p4->addValue("Note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Chorus Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the chorus and the sound that is not.", "Effect", 50);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p9);
    fx->setDescription("This effect connects an enhancer and a chorus in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x07, "Enhancer -> Flanger", 4, 8);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Enhancer Sensitivity", 0, 127, 0, 127, "", "Sensitivity of the enhancer", "Effect", 63.5);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Enhancer Mix", 0, 127, 0, 127, "", "Level of the overtones generated by the enhancer", "Effect", 63.5);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Flanger Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the flanger sound is heard", "Effect", 0);
    fx->addParam(p3);
    FP4EnumParam* p4 = new FP4EnumParam("Flanger Rate Mode", "", "When set to note the flanger is synchronized with the tempo.", "Effect", 0);
    p4->addValue("Hz");
    p4->addValue("Note");
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Flanger Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Flanger Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Flanger Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Flanger Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative settings will inverse the phase.", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Flanger Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the flanger and the sound that is not.", "Effect", 50);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p10);
    fx->setDescription("This effect connects an enhancer and a flanger in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x08, "Enhancer -> Delay", 0, 7);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Enhancer Sensitivity", 0, 127, 0, 127, "", "Sensitivity of the enhancer", "Effect", 63.5);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Enhancer Mix", 0, 127, 0, 127, "", "Level of the overtones generated by the enhancer", "Effect", 63.5);
    fx->addParam(p2);
    FP4EnumParam* p3 = new FP4EnumParam("Delay Mode", "", "When set to note the delay is synchronized with the tempo.", "Effect", 0);
    p3->addValue("Hz");
    p3->addValue("Note");
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Delay Time (ms)", 0, 127, 0, 2540, "", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Delay Time (note)", 0, 21, 0, 21, "", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Delay Feedback", 49, 89, 0, 80, "%", "Adjusts the proportion of the delayed sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Delay HF Damp", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect will be cut. If you do not want to cut the high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the delay and the sound that is not.", "Effect", 50);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p9);
    fx->setDescription("This effect connect an enhancer and a delay in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x09, "Chorus -> Delay", 5, 11);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Chorus Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the chorus sound is heard", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Chorus Rate Mode", "", "When set to note the chorus is synchronized with the tempo.", "Effect", 0);
    p2->addValue("Hz");
    p2->addValue("Note");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Chorus Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the chorus and the sound that is not.", "Effect", 50);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Delay Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p7->addValue("ms");
    p7->addValue("note");
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("Delay Time (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Delay Time (note)", 0, 21, 0, 21, "", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Delay Feedback", 49, 89, 0, 80, "%", "Adjusts the proportion of the delayed sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Delay HF Damp", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect will be cut. If you do not want to cut the high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Delay Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the delay and the sound that is not.", "Effect", 50);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p13);
    fx->setDescription("This effect connect a chorus and a delay in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x0a, "Flanger -> Delay", 6, 12);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Flanger Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the flanger sound is heard", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Flanger Rate Mode", "", "When set to note the flanger is synchronized with the tempo.", "Effect", 0);
    p2->addValue("Hz");
    p2->addValue("Note");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Flanger Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Flanger Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Flanger Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Flanger Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative settings will inverse the phase.", "Effect", 0);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Flanger Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the flanger and the sound that is not.", "Effect", 50);
    fx->addParam(p7);
    FP4EnumParam* p8 = new FP4EnumParam("Delay Mode", "", "When this is set to note the effect is synchronized with the tempo.", "Effect", 0);
    p8->addValue("ms");
    p8->addValue("note");
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Delay Time (ms)", 0, 127, 0, 2540, "", "Adjusts the time until the delay effect is heard.", "Effect", 0);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Delay Time (note)", 0, 21, 0, 21, "", "Adjusts the time from the direct sound until the delay sound is heard", "Effect", 0);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Delay Feedback", 49, 89, 0, 80, "%", "Adjusts the proportion of the delayed sound that is fed back into the effect.", "Effect", 49);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Delay HF Damp", 0, 17, 200, 8000, "Hz", "Adjusts the frequency above which sound fed back to the effect will be cut. If you do not want to cut the high frequencies, set this parameter to Bypass (maximum).", "Effect", 0);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Delay Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the delay and the sound that is not.", "Effect", 50);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p14);
    fx->setDescription("This effect connects a flanger and a delay in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x02, 0x0b, "Chorus -> Flanger", 5, 12);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Chorus Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the chorus sound is heard", "Effect", 0);
    fx->addParam(p1);
    FP4EnumParam* p2 = new FP4EnumParam("Chorus Rate Mode", "", "When set to note the chorus is synchronized with the tempo.", "Effect", 0);
    p2->addValue("Hz");
    p2->addValue("Note");
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Chorus Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Chorus Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Chorus Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Chorus Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the chorus and the sound that is not.", "Effect", 50);
    fx->addParam(p6);
    FP4ContinuousParam* p7 = new FP4ContinuousParam("Flanger Pre-delay", 0, 125, 0, 100, "ms", "Adjusts the delay time from the direct sound until the flanger sound is heard", "Effect", 0);
    fx->addParam(p7);
    FP4EnumParam* p8 = new FP4EnumParam("Flanger Rate Mode", "", "When set to note the flanger is synchronized with the tempo.", "Effect", 0);
    p8->addValue("Hz");
    p8->addValue("Note");
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("Flanger Rate (Hz)", 1, 127, 0.05, 10, "", "Frequency of modulation", "Effect", 1);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Flanger Rate (Note)", 0, 21, 0, 21, "", "Frequency of modulation", "Effect", 0);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("Flanger Depth", 0, 127, 0, 127, "", "Depth of modulation", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("Flanger Feedback", 0, 98, -98, 98, "%", "Adjusts the proportion of the flanger sound that is fed back into the effect. Negative settings will inverse the phase.", "Effect", 0);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("Flanger Balance", 0, 100, 0, 100, "", "Adjusts the volume balance between the sound that is sent through the flanger and the sound that is not.", "Effect", 50);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p14);
    fx->setDescription("This effect connects a chorus and a flanger in series.");
    effects.push_back(fx);
}

{
    FP4Effect* fx = new FP4Effect(0x00, 0x40, "Damper resonance", 0, 15);
    FP4ContinuousParam* p1 = new FP4ContinuousParam("Depth", 0, 127, 0, 127, "", "Depth of the effect", "Effect", 0);
    fx->addParam(p1);
    FP4ContinuousParam* p2 = new FP4ContinuousParam("Damper", 0, 127, 0, 127, "", "Depth to which the damper pedal is pressed (controls the resonant sound)", "Effect", 0);
    fx->addParam(p2);
    FP4ContinuousParam* p3 = new FP4ContinuousParam("Pre LPF", 1, 32, 16, 15000, "Hz", "Frequency of the filter that cuts the high-frequency content of the input sound. Set to maximum to disable.", "Effect", 1);
    fx->addParam(p3);
    FP4ContinuousParam* p4 = new FP4ContinuousParam("Pre HPF", 0, 31, 16, 15000, "Hz", "Frequency of the filter that cuts the low-frequency content of the input sound. Set to minimum to disable.", "Effect", 0);
    fx->addParam(p4);
    FP4ContinuousParam* p5 = new FP4ContinuousParam("Peaking Frequency", 0, 16, 200, 8000, "Hz", "Frequency of the filter that boosts/cuts a specific frequency in the input sound", "Effect", 8);
    fx->addParam(p5);
    FP4ContinuousParam* p6 = new FP4ContinuousParam("Peaking Gain", 0, 30, -15, 15, "dB", "Amount of cut/boost", "Effect", 15);
    fx->addParam(p6);
    FP4EnumParam* p7 = new FP4EnumParam("Peaking Q", "", "Width of the frequency region boosted/cut by the peaking gain. Larger values make the region narrower.", "Effect", 0);
    p7->addValue("0.5");
    p7->addValue("1.0");
    p7->addValue("2.0");
    p7->addValue("4.0");
    p7->addValue("8.0");
    fx->addParam(p7);
    FP4ContinuousParam* p8 = new FP4ContinuousParam("HF Damp Freq", 1, 32, 16, 15000, "Hz", "Frequency at which the high-frequency content of the resonant sound will be cut. Set to maximum to disable.", "Effect", 16.5);
    fx->addParam(p8);
    FP4ContinuousParam* p9 = new FP4ContinuousParam("LF Damp Freq", 0, 31, 16, 15000, "Hz", "Frequency at which the low-frequency content of the resonant sound will be cut. Set to minimum to disable.", "Effect", 15.5);
    fx->addParam(p9);
    FP4ContinuousParam* p10 = new FP4ContinuousParam("Level", 0, 127, 0, 127, "", "Output level", "Effect", 95);
    fx->addParam(p10);
    FP4ContinuousParam* p11 = new FP4ContinuousParam("P-Sft Amount", 0, 127, 0, 127, "", "Amount of resonance", "Effect", 0);
    fx->addParam(p11);
    FP4ContinuousParam* p12 = new FP4ContinuousParam("P-Sft Level", 0, 127, 0, 127, "", "Volume level of the resonant component", "Effect", 95);
    fx->addParam(p12);
    FP4ContinuousParam* p13 = new FP4ContinuousParam("P-Sft LPF", 1, 32, 16, 15000, "Hz", "Basic frequency at which the filter cuts the high-frequency portion of the resonant component. Set to maximum to disable.", "Effect", 1);
    fx->addParam(p13);
    FP4ContinuousParam* p14 = new FP4ContinuousParam("P-Sft HPF", 0, 31, 16, 15000, "Hz", "Basic frequency at which the filter cuts the low-frequency portion of the resonant component. Set to minimum to disable.", "Effect", 0);
    fx->addParam(p14);
    FP4ContinuousParam* p15 = new FP4ContinuousParam("P-Sft to Reverb", 0, 127, 0, 127, "", "Volume of additional resonance added to resonant component.", "Effect", 0);
    fx->addParam(p15);
    FP4ContinuousParam* p16 = new FP4ContinuousParam("Damper offset", 0, 64, 0, 64, "", "Volume of additional slight resonance when the damper pedal is not pressed", "Effect", 0);
    fx->addParam(p16);
    fx->setDescription("On an acoustic piano, holding down the damper pedal allows other strings to resonate in sympathy with the notes you play, creating rich and spacious resonances. This effect simulates these damper resonances.");
    effects.push_back(fx);
}

